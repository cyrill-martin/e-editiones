<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:java-type="http://saxon.sf.net/java-type" version="20" packageVersion="1" saxonVersion="9.8.0.12" target="JS" targetVersion="1" relocatable="true">
 <co id="0" binds="1 2 3 4 5 2 3 6 6 5">
  <template name="Q{}collectionItems" flags="os" line="598" module="rdf2html.xsl" slots="3">
   <forEach role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="599">
    <slash simple="1">
     <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
      <dot flags="a"/>
     </treat>
     <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
    </slash>
    <choose line="604">
     <and op="and">
      <and op="and">
       <fn name="exists">
        <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
       </fn>
       <fn name="empty">
        <axis name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </fn>
      </and>
      <fn name="empty">
       <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='parseType';"/>
      </fn>
     </and>
     <let line="605" var="isPreferredLanguage" as="document-node()" slot="0" eval="7">
      <doc line="606" validation="preserve">
       <callT name="isPreferredLanguage" bSlot="0"/>
      </doc>
      <choose line="610">
       <vc op="eq" onEmpty="0" comp="CCC">
        <cast as="xs:string" emptiable="0">
         <data>
          <varRef name="isPreferredLanguage" slot="0"/>
         </data>
        </cast>
        <str val="true"/>
       </vc>
       <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="611" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
        <sequence>
         <att name="property" flags="l">
          <str val="rdf:li"/>
         </att>
         <att name="content" flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <dot type="element()"/>
           </data>
          </convert>
         </att>
         <choose line="612">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
          </fn>
          <att line="614" name="xml:lang" nsuri="http://www.w3.org/XML/1998/namespace" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <cast as="xs:untypedAtomic" emptiable="0">
             <fn name="string">
              <convert from="xs:untypedAtomic" to="xs:string">
               <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
              </convert>
             </fn>
            </cast>
           </convert>
          </att>
         </choose>
         <choose line="617">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
          </fn>
          <sequence line="619">
           <att name="datatype" flags="l">
            <fn name="string-join">
             <convert from="xs:anyAtomicType" to="xs:string">
              <data>
               <mergeAdj>
                <callT name="curie" bSlot="1">
                 <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
                  <axis line="620" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                 </withParam>
                </callT>
               </mergeAdj>
              </data>
             </convert>
             <str val=""/>
            </fn>
           </att>
           <let line="623" var="datatype-xmlns" as="document-node()" slot="1" eval="7">
            <doc line="624" validation="preserve">
             <callT name="xmlns" bSlot="2">
              <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
               <axis line="625" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
              </withParam>
             </callT>
            </doc>
            <copyOf line="628" flags="vc">
             <slash>
              <slash simple="1">
               <varRef name="datatype-xmlns" slot="1"/>
               <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
             </slash>
            </copyOf>
           </let>
          </sequence>
         </choose>
         <callT line="631" name="textDetailLink" bSlot="3">
          <withParam name="Q{}property" flags="c" as="xs:string">
           <fn line="632" name="local-name">
            <dot type="element()"/>
           </fn>
          </withParam>
          <withParam name="Q{}value" flags="c" as="item()">
           <dot line="633" type="element()"/>
          </withParam>
         </callT>
         <callT line="635" name="connector" bSlot="4">
          <withParam name="Q{}criteria" flags="c" as="element()*">
           <axis line="636" name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
          </withParam>
         </callT>
        </sequence>
       </elem>
       <true/>
       <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="642" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
        <sequence>
         <att name="property" flags="l">
          <str val="rdf:li"/>
         </att>
         <att name="content" flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <dot type="element()"/>
           </data>
          </convert>
         </att>
         <choose line="643">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
          </fn>
          <att line="645" name="xml:lang" nsuri="http://www.w3.org/XML/1998/namespace" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <cast as="xs:untypedAtomic" emptiable="0">
             <fn name="string">
              <convert from="xs:untypedAtomic" to="xs:string">
               <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
              </convert>
             </fn>
            </cast>
           </convert>
          </att>
         </choose>
         <choose line="648">
          <fn name="exists">
           <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
          </fn>
          <sequence line="650">
           <att name="datatype" flags="l">
            <fn name="string-join">
             <convert from="xs:anyAtomicType" to="xs:string">
              <data>
               <mergeAdj>
                <callT name="curie" bSlot="5">
                 <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
                  <axis line="651" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                 </withParam>
                </callT>
               </mergeAdj>
              </data>
             </convert>
             <str val=""/>
            </fn>
           </att>
           <let line="654" var="datatype-xmlns" as="document-node()" slot="2" eval="7">
            <doc line="655" validation="preserve">
             <callT name="xmlns" bSlot="6">
              <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
               <axis line="656" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
              </withParam>
             </callT>
            </doc>
            <copyOf line="659" flags="vc">
             <slash>
              <slash simple="1">
               <varRef name="datatype-xmlns" slot="2"/>
               <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
             </slash>
            </copyOf>
           </let>
          </sequence>
         </choose>
        </sequence>
       </elem>
      </choose>
     </let>
     <true/>
     <sequence line="667">
      <choose>
       <gc op="=" card="1:1" comp="CCC">
        <attVal name="Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType" chk="0"/>
        <str val="Literal"/>
       </gc>
       <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="668" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
        <sequence>
         <att name="class" flags="l">
          <str val="property-object"/>
         </att>
         <att name="property" flags="l">
          <str val="rdf:li"/>
         </att>
         <callT line="669" name="property-objects" bSlot="7"/>
        </sequence>
       </elem>
       <true/>
       <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="673" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
        <sequence>
         <att name="class" flags="l">
          <str val="property-object"/>
         </att>
         <att name="rel" flags="l">
          <str val="rdf:li"/>
         </att>
         <callT line="674" name="property-objects" bSlot="8"/>
        </sequence>
       </elem>
      </choose>
      <callT line="678" name="connector" bSlot="9">
       <withParam name="Q{}criteria" flags="c" as="element()*">
        <axis line="679" name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </withParam>
      </callT>
     </sequence>
    </choose>
   </forEach>
  </template>
 </co>
 <co id="7" binds="8">
  <template name="Q{}rdf_resource-attribute" flags="os" line="395" module="rdf2html.xsl" slots="0">
   <choose role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="396">
    <fn name="exists">
     <slash simple="1">
      <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
       <dot flags="a"/>
      </treat>
      <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}resource)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='resource';"/>
     </slash>
    </fn>
    <callT line="397" name="resourceDetailLink" bSlot="0" flags="t">
     <withParam name="Q{}property" flags="c" as="xs:string">
      <fn line="398" name="local-name">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
        <dot flags="a"/>
       </treat>
      </fn>
     </withParam>
     <withParam name="Q{}namespace" flags="c" as="xs:string">
      <str val=""/>
     </withParam>
     <withParam name="Q{}localname" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}resource)?">
      <slash line="400" simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}resource)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='resource';"/>
      </slash>
     </withParam>
    </callT>
   </choose>
  </template>
 </co>
 <co id="9" binds="10 11 12 10 13 13 13 13 13">
  <template name="Q{}getLabel" flags="os" line="721" module="rdf2html.xsl" slots="9">
   <let role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="752" var="vv:v0" as="xs:string?" slot="2" eval="13">
    <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:contains">
     <check card="?" diag="0|1||fn:contains">
      <cvUntyped to="xs:string">
       <data>
        <gVarRef name="Q{}language" bSlot="0"/>
       </data>
      </cvUntyped>
     </check>
    </treat>
    <sequence line="722">
     <param name="Q{}uri" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <param line="723" name="Q{}property" slot="1">
      <str role="select" val=""/>
      <supplied role="conversion" slot="1"/>
     </param>
     <let line="728" var="uri-noslash" as="document-node()" slot="3" eval="7">
      <doc line="730" flags="t" validation="preserve">
       <choose>
        <fn name="contains">
         <cvUntyped to="xs:string">
          <cast line="726" as="xs:untypedAtomic" emptiable="0">
           <fn name="substring">
            <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring">
             <check card="?" diag="0|0||fn:substring">
              <cvUntyped to="xs:string">
               <data>
                <varRef name="uri" slot="0"/>
               </data>
              </cvUntyped>
             </check>
            </treat>
            <arith op="-" calc="i-i">
             <fn name="string-length">
              <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:string-length">
               <check card="?" diag="0|0||fn:string-length">
                <cvUntyped to="xs:string">
                 <data>
                  <varRef name="uri" slot="0"/>
                 </data>
                </cvUntyped>
               </check>
              </treat>
             </fn>
             <int val="1"/>
            </arith>
           </fn>
          </cast>
         </cvUntyped>
         <str val="/"/>
        </fn>
        <valueOf line="731" flags="l">
         <fn name="substring">
          <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring">
           <check card="?" diag="0|0||fn:substring">
            <cvUntyped to="xs:string">
             <data>
              <varRef name="uri" slot="0"/>
             </data>
            </cvUntyped>
           </check>
          </treat>
          <int val="1"/>
          <arith op="-" calc="i-i">
           <fn name="string-length">
            <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:string-length">
             <check card="?" diag="0|0||fn:string-length">
              <cvUntyped to="xs:string">
               <data>
                <varRef name="uri" slot="0"/>
               </data>
              </cvUntyped>
             </check>
            </treat>
           </fn>
           <int val="1"/>
          </arith>
         </fn>
        </valueOf>
        <true/>
        <valueOf line="734" flags="l">
         <fn name="string-join">
          <convert from="xs:anyAtomicType" to="xs:string">
           <data>
            <mergeAdj>
             <varRef name="uri" slot="0"/>
            </mergeAdj>
           </data>
          </convert>
          <str val=" "/>
         </fn>
        </valueOf>
       </choose>
      </doc>
      <let line="740" var="namespace" as="document-node()" slot="4" eval="7">
       <doc line="741" validation="preserve">
        <callT name="get-ns" bSlot="1">
         <withParam name="Q{}uri" flags="c" as="document-node()">
          <varRef line="742" name="uri-noslash" slot="3"/>
         </withParam>
        </callT>
       </doc>
       <let line="761" var="vv:v2" as="xs:string" slot="5" eval="13">
        <cast as="xs:string" emptiable="0">
         <data>
          <varRef name="namespace" slot="4"/>
         </data>
        </cast>
        <let line="745" var="localname" as="document-node()" slot="6" eval="7">
         <doc line="746" validation="preserve">
          <callT name="get-name" bSlot="2">
           <withParam name="Q{}uri" flags="c" as="document-node()">
            <varRef line="747" name="uri-noslash" slot="3"/>
           </withParam>
          </callT>
         </doc>
         <choose line="752">
          <fn name="exists">
           <filter flags="b">
            <slash>
             <fn name="key">
              <str val="Q{http://saxon.sf.net/}kk102"/>
              <data>
               <varRef name="uri" slot="0"/>
              </data>
              <root/>
             </fn>
             <axis name="child" nodeTest="element(Q{http://www.w3.org/2000/01/rdf-schema#}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2000/01/rdf-schema#'&amp;&amp;q.local==='label';"/>
            </slash>
            <fn name="contains">
             <cvUntyped to="xs:string">
              <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
             </cvUntyped>
             <varRef name="vv:v0" slot="2"/>
            </fn>
           </filter>
          </fn>
          <let line="753" var="vv:v1" as="xs:string?" slot="7" eval="13">
           <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:contains">
            <check card="?" diag="0|1||fn:contains">
             <cvUntyped to="xs:string">
              <data>
               <gVarRef name="Q{}language" bSlot="3"/>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <valueOf>
            <fn name="string-join">
             <convert from="xs:untypedAtomic" to="xs:string">
              <data>
               <docOrder intra="1">
                <filter flags="b">
                 <slash>
                  <fn name="key">
                   <str val="Q{http://saxon.sf.net/}kk102"/>
                   <data>
                    <varRef name="uri" slot="0"/>
                   </data>
                   <root/>
                  </fn>
                  <axis name="child" nodeTest="element(Q{http://www.w3.org/2000/01/rdf-schema#}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2000/01/rdf-schema#'&amp;&amp;q.local==='label';"/>
                 </slash>
                 <fn name="contains">
                  <cvUntyped to="xs:string">
                   <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
                  </cvUntyped>
                  <varRef name="vv:v1" slot="7"/>
                 </fn>
                </filter>
               </docOrder>
              </data>
             </convert>
             <str val=" "/>
            </fn>
           </valueOf>
          </let>
          <fn line="755" name="exists">
           <filter flags="b">
            <slash>
             <fn name="key">
              <str val="Q{http://saxon.sf.net/}kk102"/>
              <data>
               <varRef name="uri" slot="0"/>
              </data>
              <root/>
             </fn>
             <axis name="child" nodeTest="element(Q{http://www.w3.org/2000/01/rdf-schema#}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2000/01/rdf-schema#'&amp;&amp;q.local==='label';"/>
            </slash>
            <fn name="contains">
             <cvUntyped to="xs:string">
              <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
             </cvUntyped>
             <str val="en"/>
            </fn>
           </filter>
          </fn>
          <valueOf line="756">
           <fn name="string-join">
            <convert from="xs:untypedAtomic" to="xs:string">
             <data>
              <docOrder intra="1">
               <filter flags="b">
                <slash>
                 <fn name="key">
                  <str val="Q{http://saxon.sf.net/}kk102"/>
                  <data>
                   <varRef name="uri" slot="0"/>
                  </data>
                  <root/>
                 </fn>
                 <axis name="child" nodeTest="element(Q{http://www.w3.org/2000/01/rdf-schema#}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2000/01/rdf-schema#'&amp;&amp;q.local==='label';"/>
                </slash>
                <fn name="contains">
                 <cvUntyped to="xs:string">
                  <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
                 </cvUntyped>
                 <str val="en"/>
                </fn>
               </filter>
              </docOrder>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <fn line="758" name="exists">
           <slash>
            <fn name="key">
             <str val="Q{http://saxon.sf.net/}kk102"/>
             <data>
              <varRef name="uri" slot="0"/>
             </data>
             <root/>
            </fn>
            <axis name="child" nodeTest="element(Q{http://www.w3.org/2000/01/rdf-schema#}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2000/01/rdf-schema#'&amp;&amp;q.local==='label';"/>
           </slash>
          </fn>
          <valueOf line="759">
           <fn name="string-join">
            <convert from="xs:untypedAtomic" to="xs:string">
             <data>
              <docOrder intra="1">
               <slash>
                <fn name="key">
                 <str val="Q{http://saxon.sf.net/}kk102"/>
                 <data>
                  <varRef name="uri" slot="0"/>
                 </data>
                 <root/>
                </fn>
                <axis name="child" nodeTest="element(Q{http://www.w3.org/2000/01/rdf-schema#}label)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/2000/01/rdf-schema#'&amp;&amp;q.local==='label';"/>
               </slash>
              </docOrder>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
          <and line="761" op="and">
           <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
            <data>
             <gVarRef name="Q{}namespaces" bSlot="4"/>
            </data>
            <str val="true"/>
           </gc>
           <fn name="exists">
            <filter flags="b">
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|8|XPTY0020|">
               <dot flags="a"/>
              </treat>
              <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
             </slash>
             <and op="and">
              <vc op="eq" onEmpty="0" comp="CCC">
               <data>
                <dot type="namespace-node()"/>
               </data>
               <varRef name="vv:v2" slot="5"/>
              </vc>
              <fn name="name">
               <dot type="namespace-node()"/>
              </fn>
             </and>
            </filter>
           </fn>
          </and>
          <let line="763" var="vv:v3" as="xs:string" slot="8" eval="13">
           <cast as="xs:string" emptiable="0">
            <data>
             <varRef name="namespace" slot="4"/>
            </data>
           </cast>
           <valueOf line="765">
            <fn line="763" name="concat">
             <fn name="concat">
              <cast as="xs:untypedAtomic" emptiable="0">
               <fn name="name">
                <check card="?" diag="0|0||fn:name">
                 <filter flags="b">
                  <slash simple="1">
                   <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|8|XPTY0020|">
                    <dot flags="a"/>
                   </treat>
                   <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
                  </slash>
                  <and op="and">
                   <vc op="eq" onEmpty="0" comp="CCC">
                    <data>
                     <dot type="namespace-node()"/>
                    </data>
                    <varRef name="vv:v3" slot="8"/>
                   </vc>
                   <fn name="name">
                    <dot type="namespace-node()"/>
                   </fn>
                  </and>
                 </filter>
                </check>
               </fn>
              </cast>
              <str val=":"/>
             </fn>
             <data line="765">
              <varRef name="localname" slot="6"/>
             </data>
            </fn>
           </valueOf>
          </let>
          <and line="769" op="and">
           <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
            <data>
             <gVarRef name="Q{}namespaces" bSlot="5"/>
            </data>
            <str val="true"/>
           </gc>
           <gc op="=" card="N:1" comp="CCC">
            <data>
             <filter flags="b">
              <slash simple="1">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|8|XPTY0020|">
                <dot flags="a"/>
               </treat>
               <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
              </slash>
              <fn name="not">
               <fn name="name">
                <dot type="namespace-node()"/>
               </fn>
              </fn>
             </filter>
            </data>
            <data>
             <varRef name="namespace" slot="4"/>
            </data>
           </gc>
          </and>
          <valueOf line="770">
           <fn name="concat">
            <str val=":"/>
            <data>
             <varRef name="localname" slot="6"/>
            </data>
           </fn>
          </valueOf>
          <and line="772" op="and">
           <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
            <data>
             <gVarRef name="Q{}namespaces" bSlot="6"/>
            </data>
            <str val="false"/>
           </gc>
           <gc op="=" card="N:1" comp="CCC">
            <data>
             <filter flags="b">
              <slash simple="1">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|8|XPTY0020|">
                <dot flags="a"/>
               </treat>
               <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
              </slash>
              <fn name="not">
               <fn name="name">
                <dot type="namespace-node()"/>
               </fn>
              </fn>
             </filter>
            </data>
            <data>
             <varRef name="namespace" slot="4"/>
            </data>
           </gc>
          </and>
          <valueOf line="773">
           <convert from="xs:untypedAtomic" to="xs:string">
            <data>
             <varRef name="localname" slot="6"/>
            </data>
           </convert>
          </valueOf>
          <and line="775" op="and">
           <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
            <data>
             <gVarRef name="Q{}namespaces" bSlot="7"/>
            </data>
            <str val="true"/>
           </gc>
           <gc op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
            <data>
             <varRef name="property" slot="1"/>
            </data>
            <str val="type"/>
           </gc>
          </and>
          <valueOf line="776">
           <convert from="xs:untypedAtomic" to="xs:string">
            <data>
             <varRef name="localname" slot="6"/>
            </data>
           </convert>
          </valueOf>
          <gc line="778" op="=" card="N:1" comp="GAC|http://www.w3.org/2005/xpath-functions/collation/codepoint">
           <data>
            <gVarRef name="Q{}namespaces" bSlot="8"/>
           </data>
           <str val="false"/>
          </gc>
          <valueOf line="779">
           <convert from="xs:untypedAtomic" to="xs:string">
            <data>
             <varRef name="localname" slot="6"/>
            </data>
           </convert>
          </valueOf>
          <true/>
          <valueOf line="782">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="uri" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </valueOf>
         </choose>
        </let>
       </let>
      </let>
     </let>
    </sequence>
   </let>
  </template>
 </co>
 <co id="14" binds="15 5 14">
  <template name="Q{}buildList" flags="os" line="301" module="rdf2html.xsl" slots="1">
   <elem role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="302" name="div" nsuri="" namespaces="rdf rdfs">
    <sequence>
     <att name="class" flags="l">
      <str val="property-object"/>
     </att>
     <att name="typeof" flags="l">
      <str val="rdf:List"/>
     </att>
     <elem line="303" name="div" nsuri="" flags="l" namespaces="rdf rdfs">
      <sequence>
       <att name="class" flags="l">
        <str val="property-object"/>
       </att>
       <att name="rel" flags="l">
        <str val="rdf:first"/>
       </att>
       <callT line="304" name="embeddedRdfDescription" bSlot="0"/>
      </sequence>
     </elem>
     <elem line="306" name="div" nsuri="" flags="l" namespaces="rdf rdfs">
      <sequence>
       <att name="class" flags="l">
        <str val="property-object"/>
       </att>
       <att name="rel" flags="l">
        <str val="rdf:rest"/>
       </att>
       <choose line="308">
        <fn name="exists">
         <slash simple="1">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|7|XPTY0020|">
           <dot flags="a"/>
          </treat>
          <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         </slash>
        </fn>
        <let line="310" var="vv:cc-1547847999" as="element()*" slot="0" eval="4">
         <slash simple="1">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|7|XPTY0020|">
           <dot flags="a"/>
          </treat>
          <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         </slash>
         <sequence line="309">
          <callT name="connector" bSlot="1">
           <withParam name="Q{}criteria" flags="c" as="element()*">
            <varRef name="vv:cc-1547847999" slot="0"/>
           </withParam>
          </callT>
          <forEach line="312">
           <first>
            <varRef name="vv:cc-1547847999" slot="0"/>
           </first>
           <callT line="313" name="buildList" bSlot="2"/>
          </forEach>
         </sequence>
        </let>
        <true/>
        <att line="317" name="resource" flags="l">
         <str val="[rdf:nil]"/>
        </att>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </elem>
  </template>
 </co>
 <co id="6" binds="7 16 15 14 2 17 15">
  <template name="Q{}property-objects" flags="os" line="260" module="rdf2html.xsl" slots="0">
   <choose role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="262">
    <fn name="exists">
     <slash simple="1">
      <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
       <dot flags="a"/>
      </treat>
      <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}resource)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='resource';"/>
     </slash>
    </fn>
    <callT line="263" name="rdf_resource-attribute" bSlot="0" flags="t"/>
    <fn line="265" name="exists">
     <slash simple="1">
      <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
       <dot flags="a"/>
      </treat>
      <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}first)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='first';"/>
     </slash>
    </fn>
    <forEach line="266">
     <slash simple="1">
      <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
       <dot flags="a"/>
      </treat>
      <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}first)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='first';"/>
     </slash>
     <callT line="267" name="ListItems" bSlot="1"/>
    </forEach>
    <gc line="270" op="=" card="1:1" comp="CCC">
     <data>
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='parseType';"/>
      </slash>
     </data>
     <str val="Resource"/>
    </gc>
    <callT line="271" name="embeddedRdfDescription" bSlot="2" flags="t"/>
    <gc line="273" op="=" card="1:1" comp="CCC">
     <data>
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='parseType';"/>
      </slash>
     </data>
     <str val="Collection"/>
    </gc>
    <forEach line="274">
     <first>
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </slash>
     </first>
     <callT line="275" name="buildList" bSlot="3" flags="t"/>
    </forEach>
    <gc line="278" op="=" card="1:1" comp="CCC">
     <data>
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='parseType';"/>
      </slash>
     </data>
     <str val="Literal"/>
    </gc>
    <sequence line="280">
     <att name="datatype">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <mergeAdj>
          <callT name="curie" bSlot="4">
           <withParam name="Q{}uri" flags="c" as="xs:string">
            <str val="http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral"/>
           </withParam>
          </callT>
         </mergeAdj>
        </data>
       </convert>
       <str val=""/>
      </fn>
     </att>
     <choose line="284">
      <fn name="exists">
       <slash simple="1">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
         <dot flags="a"/>
        </treat>
        <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
       </slash>
      </fn>
      <att line="286" name="xml:lang" nsuri="http://www.w3.org/XML/1998/namespace">
       <convert from="xs:untypedAtomic" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot flags="a"/>
             </treat>
             <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
            </slash>
           </data>
          </convert>
         </fn>
        </cast>
       </convert>
      </att>
     </choose>
     <applyT line="289" mode="Q{}copy-subtree" flags="ti" bSlot="5">
      <slash role="select" simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="13|0|XTTE0510|">
        <dot flags="a"/>
       </treat>
       <axis name="child" nodeTest="node()" jsTest="return true;"/>
      </slash>
     </applyT>
    </sequence>
    <fn line="291" name="exists">
     <slash simple="1">
      <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
       <dot flags="a"/>
      </treat>
      <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
    </fn>
    <forEach line="292">
     <slash simple="1">
      <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
       <dot flags="a"/>
      </treat>
      <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
     </slash>
     <callT line="293" name="embeddedRdfDescription" bSlot="6"/>
    </forEach>
   </choose>
  </template>
 </co>
 <co id="15" binds="2 0 18 19 20 8">
  <template name="Q{}embeddedRdfDescription" flags="os" line="135" module="rdf2html.xsl" slots="0">
   <choose role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="138">
    <and op="and">
     <vc op="eq" onEmpty="0" comp="CCC">
      <fn name="namespace-uri">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:namespace-uri">
        <dot flags="a"/>
       </treat>
      </fn>
      <str val="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
     </vc>
     <gc op="=" card="N:1" comp="CCC">
      <literal count="3">
       <str val="Seq"/>
       <str val="Alt"/>
       <str val="Bag"/>
      </literal>
      <fn name="local-name">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
        <dot flags="a"/>
       </treat>
      </fn>
     </gc>
    </and>
    <elem line="141" name="div" nsuri="" namespaces="rdf rdfs">
     <sequence>
      <att name="typeof" flags="l">
       <fn name="string-join">
        <convert from="xs:anyAtomicType" to="xs:string">
         <data>
          <mergeAdj>
           <callT name="curie" bSlot="0">
            <withParam name="Q{}uri" flags="c" as="xs:string">
             <fn line="142" name="concat">
              <fn name="namespace-uri">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:namespace-uri">
                <dot flags="a"/>
               </treat>
              </fn>
              <fn name="local-name">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
                <dot flags="a"/>
               </treat>
              </fn>
             </fn>
            </withParam>
           </callT>
          </mergeAdj>
         </data>
        </convert>
        <str val=""/>
       </fn>
      </att>
      <callT line="145" name="collectionItems" bSlot="1"/>
     </sequence>
    </elem>
    <fn line="150" name="exists">
     <sequence>
      <filter flags="b">
       <slash simple="1">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
         <dot flags="a"/>
        </treat>
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </slash>
       <and op="and">
        <vc op="ne" onEmpty="1" comp="CCC">
         <fn name="name">
          <dot type="element()"/>
         </fn>
         <str val="http://www.w3.org/2000/01/rdf-schema#"/>
        </vc>
        <vc op="ne" onEmpty="1" comp="CCC">
         <fn name="local-name">
          <dot type="element()"/>
         </fn>
         <str val="label"/>
        </vc>
       </and>
      </filter>
      <filter flags="b">
       <slash simple="1">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
         <dot flags="a"/>
        </treat>
        <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
       </slash>
       <and op="and">
        <vc op="ne" onEmpty="1" comp="CCC">
         <fn name="namespace-uri">
          <dot type="attribute()"/>
         </fn>
         <str val="http://www.w3.org/2000/01/rdf-schema#"/>
        </vc>
        <and op="and">
         <vc op="ne" onEmpty="1" comp="CCC">
          <fn name="local-name">
           <dot type="attribute()"/>
          </fn>
          <str val="label"/>
         </vc>
         <vc op="ne" onEmpty="1" comp="CCC">
          <fn name="local-name">
           <dot type="attribute()"/>
          </fn>
          <str val="about"/>
         </vc>
        </and>
       </and>
      </filter>
     </sequence>
    </fn>
    <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="152" name="table" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
     <sequence>
      <choose>
       <fn name="not">
        <gc op="=" card="1:1" comp="CCC">
         <data>
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
            <dot flags="a"/>
           </treat>
           <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='parseType';"/>
          </slash>
         </data>
         <str val="Resource"/>
        </gc>
       </fn>
       <callT line="153" name="header" bSlot="2"/>
      </choose>
      <choose line="155">
       <gc op="=" card="1:1" comp="CCC">
        <data>
         <slash simple="1">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
           <dot flags="a"/>
          </treat>
          <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='parseType';"/>
         </slash>
        </data>
        <str val="Resource"/>
       </gc>
       <att line="157" name="typeof" flags="l">
        <str val="rdfs:Resource"/>
       </att>
      </choose>
      <callT line="160" name="attributes" bSlot="3"/>
      <callT line="161" name="properties" bSlot="4"/>
     </sequence>
    </elem>
    <fn line="165" name="exists">
     <filter flags="b">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|9|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="parent" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </slash>
      <vc op="ne" onEmpty="1" comp="CCC">
       <fn name="name">
        <dot type="element()"/>
       </fn>
       <str val="rdf:RDF"/>
      </vc>
     </filter>
    </fn>
    <callT line="166" name="resourceDetailLink" bSlot="5" flags="t">
     <withParam name="Q{}property" flags="c" as="xs:string">
      <fn line="167" name="local-name">
       <check card="?" diag="0|0||fn:local-name">
        <slash simple="1">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|9|XPTY0020|">
          <dot flags="a"/>
         </treat>
         <axis name="parent" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </check>
      </fn>
     </withParam>
     <withParam name="Q{}namespace" flags="c" as="xs:string">
      <str val=""/>
     </withParam>
     <withParam name="Q{}localname" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about)?">
      <slash line="169" simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';"/>
      </slash>
     </withParam>
    </callT>
   </choose>
  </template>
 </co>
 <co id="1" binds="10 10 10">
  <template name="Q{}isPreferredLanguage" flags="os" line="698" module="rdf2html.xsl" slots="7">
   <let role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="713" var="vv:v3" as="xs:string?" slot="0" eval="13">
    <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:contains">
     <check card="?" diag="0|1||fn:contains">
      <cvUntyped to="xs:string">
       <data>
        <gVarRef name="Q{}language" bSlot="0"/>
       </data>
      </cvUntyped>
     </check>
    </treat>
    <let line="708" var="vv:v1" as="xs:string?" slot="1" eval="13">
     <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:contains">
      <check card="?" diag="0|1||fn:contains">
       <cvUntyped to="xs:string">
        <data>
         <gVarRef name="Q{}language" bSlot="1"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
     <let line="699" var="element" as="xs:untypedAtomic" slot="2" eval="7">
      <cast line="700" as="xs:untypedAtomic" emptiable="0">
       <fn name="name">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:name">
         <dot flags="a"/>
        </treat>
       </fn>
      </cast>
      <let line="713" var="vv:v4" as="xs:string" slot="3" eval="13">
       <cast as="xs:string" emptiable="0">
        <varRef name="element" slot="2"/>
       </cast>
       <let var="vv:v2" as="xs:string" slot="4" eval="13">
        <cast as="xs:string" emptiable="0">
         <varRef name="element" slot="2"/>
        </cast>
        <let line="708" var="vv:v0" as="xs:string" slot="5" eval="13">
         <cast as="xs:string" emptiable="0">
          <varRef name="element" slot="2"/>
         </cast>
         <choose line="704">
          <fn name="contains">
           <cvUntyped to="xs:string">
            <data>
             <slash simple="1">
              <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
               <dot flags="a"/>
              </treat>
              <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
             </slash>
            </data>
           </cvUntyped>
           <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:contains">
            <check card="?" diag="0|1||fn:contains">
             <cvUntyped to="xs:string">
              <data>
               <gVarRef name="Q{}language" bSlot="2"/>
              </data>
             </cvUntyped>
            </check>
           </treat>
          </fn>
          <valueOf line="705">
           <str val="true"/>
          </valueOf>
          <and line="708" op="and">
           <fn name="contains">
            <cvUntyped to="xs:string">
             <data>
              <slash simple="1">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                <dot flags="a"/>
               </treat>
               <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
              </slash>
             </data>
            </cvUntyped>
            <str val="en"/>
           </fn>
           <fn name="empty">
            <filter flags="b">
             <slash>
              <slash simple="1">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|9|XPTY0020|">
                <dot flags="a"/>
               </treat>
               <axis name="parent" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
             </slash>
             <and op="and">
              <vc op="eq" onEmpty="0" comp="CCC">
               <fn name="name">
                <dot type="element()"/>
               </fn>
               <varRef name="vv:v0" slot="5"/>
              </vc>
              <fn name="contains">
               <cvUntyped to="xs:string">
                <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
               </cvUntyped>
               <varRef name="vv:v1" slot="1"/>
              </fn>
             </and>
            </filter>
           </fn>
          </and>
          <valueOf line="709">
           <str val="true"/>
          </valueOf>
          <let line="713" var="vv:cc-1549945151" as="element()*" slot="6" eval="4">
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|9|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="parent" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
           <and op="and">
            <and op="and">
             <fn name="empty">
              <slash simple="1">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                <dot flags="a"/>
               </treat>
               <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
              </slash>
             </fn>
             <fn name="empty">
              <filter flags="b">
               <slash>
                <varRef name="vv:cc-1549945151" slot="6"/>
                <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
               </slash>
               <and op="and">
                <vc op="eq" onEmpty="0" comp="CCC">
                 <fn name="name">
                  <dot type="element()"/>
                 </fn>
                 <varRef name="vv:v2" slot="4"/>
                </vc>
                <fn name="contains">
                 <cvUntyped to="xs:string">
                  <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
                 </cvUntyped>
                 <varRef name="vv:v3" slot="0"/>
                </fn>
               </and>
              </filter>
             </fn>
            </and>
            <fn name="empty">
             <filter flags="b">
              <slash>
               <varRef name="vv:cc-1549945151" slot="6"/>
               <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <and op="and">
               <vc op="eq" onEmpty="0" comp="CCC">
                <fn name="name">
                 <dot type="element()"/>
                </fn>
                <varRef name="vv:v4" slot="3"/>
               </vc>
               <fn name="contains">
                <cvUntyped to="xs:string">
                 <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
                </cvUntyped>
                <str val="en"/>
               </fn>
              </and>
             </filter>
            </fn>
           </and>
          </let>
          <valueOf line="714">
           <str val="true"/>
          </valueOf>
          <true/>
          <valueOf line="717">
           <str val="false"/>
          </valueOf>
         </choose>
        </let>
       </let>
      </let>
     </let>
    </let>
   </let>
  </template>
 </co>
 <co id="5" binds="">
  <template name="Q{}connector" flags="os" line="686" module="rdf2html.xsl" slots="1">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="687">
    <param name="Q{}criteria" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <choose line="689">
     <fn name="exists">
      <tail start="2">
       <varRef name="criteria" slot="0"/>
      </tail>
     </fn>
     <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="690" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
      <sequence>
       <att name="class" flags="l">
        <str val="connector"/>
       </att>
       <valueOf flags="Sl">
        <str val=","/>
       </valueOf>
      </sequence>
     </elem>
     <compareToInt line="692" op="eq" val="1">
      <fn name="count">
       <fn name="subsequence">
        <varRef name="criteria" slot="0"/>
        <int val="1"/>
        <int val="2"/>
       </fn>
      </fn>
     </compareToInt>
     <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="693" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
      <sequence>
       <att name="class" flags="l">
        <str val="connector"/>
       </att>
       <valueOf flags="dSl">
        <str val="and"/>
       </valueOf>
      </sequence>
     </elem>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="13" vis="PUBLIC" binds="">
  <globalParam name="Q{}namespaces" type="item()*" line="26" module="rdf2html.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <doc ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="26" flags="t" text="true" validation="preserve">
    <valueOf flags="Sl">
     <str val="true"/>
    </valueOf>
   </doc>
  </globalParam>
 </co>
 <co id="3" binds="11">
  <template name="Q{}xmlns" flags="os" line="982" module="rdf2html.xsl" slots="3">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="983">
    <param name="Q{}uri" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <let line="984" var="namespace" as="document-node()" slot="1" eval="7">
     <doc line="985" validation="preserve">
      <callT name="get-ns" bSlot="0">
       <withParam name="Q{}uri" flags="c">
        <varRef line="986" name="uri" slot="0"/>
       </withParam>
      </callT>
     </doc>
     <let line="990" var="vv:v0" as="xs:string" slot="2" eval="13">
      <cast as="xs:string" emptiable="0">
       <data>
        <varRef name="namespace" slot="1"/>
       </data>
      </cast>
      <choose>
       <fn name="exists">
        <filter flags="b">
         <slash simple="1">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|8|XPTY0020|">
           <dot flags="a"/>
          </treat>
          <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
         </slash>
         <vc op="eq" comp="CCC">
          <data>
           <dot type="namespace-node()"/>
          </data>
          <varRef name="vv:v0" slot="2"/>
         </vc>
        </filter>
       </fn>
       <empty/>
       <true/>
       <compElem line="993">
        <fn role="name" name="concat">
         <fn name="generate-id">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:generate-id">
           <dot flags="a"/>
          </treat>
         </fn>
         <str val=":dummy-for-xmlns"/>
        </fn>
        <convert role="namespace" from="xs:untypedAtomic" to="xs:string">
         <data>
          <varRef name="namespace" slot="1"/>
         </data>
        </convert>
        <empty role="content"/>
       </compElem>
      </choose>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="21" binds="">
  <template name="Q{}rdfDescriptionActions" flags="os" line="90" module="rdf2html.xsl" slots="3">
   <let role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="91" var="resource" as="xs:untypedAtomic" slot="0" eval="7">
    <cast line="92" as="xs:untypedAtomic" emptiable="0">
     <fn name="string-join">
      <convert from="xs:untypedAtomic" to="xs:string">
       <data>
        <slash simple="1">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
          <dot flags="a"/>
         </treat>
         <axis name="attribute" nodeTest="((((attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about)) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}aboutEach)) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}aboutEachPrefix)) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}bagID))" jsTest="function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='aboutEach';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='aboutEachPrefix';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='bagID';};return a()||b();"/>
        </slash>
       </data>
      </convert>
      <str val=" "/>
     </fn>
    </cast>
    <sequence ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="96">
     <elem name="a" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
      <sequence>
       <att name="class" flags="l">
        <str val="generic"/>
       </att>
       <att name="href" flags="l">
        <fn name="concat">
         <str val="?query=DESCRIBE%20%3Fr%20WHERE%20%7B%20%3Fr%20%3Fp%20&lt;"/>
         <convert from="xs:untypedAtomic" to="xs:string">
          <varRef name="resource" slot="0"/>
         </convert>
         <str val="&gt;%20%7D"/>
        </fn>
       </att>
       <att name="onclick" flags="l">
        <fn name="concat">
         <str val="javascript:rhz.describeReferrers('"/>
         <convert from="xs:untypedAtomic" to="xs:string">
          <varRef name="resource" slot="0"/>
         </convert>
         <str val="'); return false;"/>
        </fn>
       </att>
       <att name="title" flags="l">
        <fn name="concat">
         <str val="Referrers for "/>
         <convert from="xs:untypedAtomic" to="xs:string">
          <varRef name="resource" slot="0"/>
         </convert>
        </fn>
       </att>
       <valueOf flags="Sl">
        <str val="Referrers"/>
       </valueOf>
      </sequence>
     </elem>
     <choose ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="102">
      <let var="vv:cc-1543653695" as="element()*" slot="1" eval="4">
       <slash simple="1">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
         <dot flags="a"/>
        </treat>
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </slash>
       <or op="or">
        <and op="and">
         <fn name="exists">
          <filter flags="b">
           <varRef name="vv:cc-1543653695" slot="1"/>
           <and op="and">
            <vc op="eq" onEmpty="0" comp="CCC">
             <fn name="namespace-uri">
              <dot type="element()"/>
             </fn>
             <str val="http://www.w3.org/2003/01/geo/wgs84_pos#"/>
            </vc>
            <vc op="eq" onEmpty="0" comp="CCC">
             <fn name="local-name">
              <dot type="element()"/>
             </fn>
             <str val="lat"/>
            </vc>
           </and>
          </filter>
         </fn>
         <fn name="exists">
          <filter flags="b">
           <varRef name="vv:cc-1543653695" slot="1"/>
           <and op="and">
            <vc op="eq" onEmpty="0" comp="CCC">
             <fn name="namespace-uri">
              <dot type="element()"/>
             </fn>
             <str val="http://www.w3.org/2003/01/geo/wgs84_pos#"/>
            </vc>
            <vc op="eq" onEmpty="0" comp="CCC">
             <fn name="local-name">
              <dot type="element()"/>
             </fn>
             <str val="long"/>
            </vc>
           </and>
          </filter>
         </fn>
        </and>
        <fn name="exists">
         <filter flags="b">
          <varRef name="vv:cc-1543653695" slot="1"/>
          <and op="and">
           <vc op="eq" onEmpty="0" comp="CCC">
            <fn name="namespace-uri">
             <dot type="element()"/>
            </fn>
            <str val="http://www.georss.org/georss#"/>
           </vc>
           <vc op="eq" onEmpty="0" comp="CCC">
            <fn name="local-name">
             <dot type="element()"/>
            </fn>
            <str val="point"/>
           </vc>
          </and>
         </filter>
        </fn>
       </or>
      </let>
      <sequence>
       <valueOf>
        <str val="&#xA;&#x9;&#x9;&#x9; -&#xA;&#x9;&#x9;&#x9;"/>
       </valueOf>
       <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="106" name="a" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
        <sequence>
         <att name="class" flags="l">
          <str val="specific"/>
         </att>
         <att name="href" flags="l">
          <str val="#"/>
         </att>
         <att name="onclick" flags="l">
          <fn name="concat">
           <str val="javascript:rhz.callServiceOnResource('Map', '/services/map/map.jsp', '"/>
           <convert from="xs:untypedAtomic" to="xs:string">
            <varRef name="resource" slot="0"/>
           </convert>
           <str val="'); return false;"/>
          </fn>
         </att>
         <att name="title" flags="l">
          <fn name="concat">
           <str val="Map "/>
           <convert from="xs:untypedAtomic" to="xs:string">
            <varRef name="resource" slot="0"/>
           </convert>
          </fn>
         </att>
         <valueOf flags="l">
          <str val=" Map "/>
         </valueOf>
        </sequence>
       </elem>
      </sequence>
     </choose>
     <choose ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="111">
      <let var="vv:cc-1543653695" as="element()*" slot="2" eval="4">
       <slash simple="1">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
         <dot flags="a"/>
        </treat>
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </slash>
       <or op="or">
        <and op="and">
         <fn name="exists">
          <filter flags="b">
           <varRef name="vv:cc-1543653695" slot="2"/>
           <and op="and">
            <vc op="eq" onEmpty="0" comp="CCC">
             <fn name="namespace-uri">
              <dot type="element()"/>
             </fn>
             <str val="http://www.w3.org/2002/12/cal/icaltzd#"/>
            </vc>
            <vc op="eq" onEmpty="0" comp="CCC">
             <fn name="local-name">
              <dot type="element()"/>
             </fn>
             <str val="dtend"/>
            </vc>
           </and>
          </filter>
         </fn>
         <fn name="exists">
          <filter flags="b">
           <varRef name="vv:cc-1543653695" slot="2"/>
           <and op="and">
            <vc op="eq" onEmpty="0" comp="CCC">
             <fn name="namespace-uri">
              <dot type="element()"/>
             </fn>
             <str val="http://www.w3.org/2002/12/cal/icaltzd#"/>
            </vc>
            <vc op="eq" onEmpty="0" comp="CCC">
             <fn name="local-name">
              <dot type="element()"/>
             </fn>
             <str val="dtstart"/>
            </vc>
           </and>
          </filter>
         </fn>
        </and>
        <fn name="exists">
         <filter flags="b">
          <varRef name="vv:cc-1543653695" slot="2"/>
          <and op="and">
           <vc op="eq" onEmpty="0" comp="CCC">
            <fn name="namespace-uri">
             <dot type="element()"/>
            </fn>
            <str val="http://purl.org/dc/elements/1.1/"/>
           </vc>
           <vc op="eq" onEmpty="0" comp="CCC">
            <fn name="local-name">
             <dot type="element()"/>
            </fn>
            <str val="date"/>
           </vc>
          </and>
         </filter>
        </fn>
       </or>
      </let>
      <sequence>
       <valueOf>
        <str val="&#xA;&#x9;&#x9;&#x9; -&#xA;&#x9;&#x9;&#x9;"/>
       </valueOf>
       <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="115" name="a" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
        <sequence>
         <att name="class" flags="l">
          <str val="specific"/>
         </att>
         <att name="href" flags="l">
          <str val="#"/>
         </att>
         <att name="onclick" flags="l">
          <fn name="concat">
           <str val="javascript:rhz.callServiceOnResource('Timeline', '/services/timeline/timeline.jsp', '"/>
           <convert from="xs:untypedAtomic" to="xs:string">
            <varRef name="resource" slot="0"/>
           </convert>
           <str val="'); return false;"/>
          </fn>
         </att>
         <att name="title" flags="l">
          <fn name="concat">
           <str val="Timeline "/>
           <convert from="xs:untypedAtomic" to="xs:string">
            <varRef name="resource" slot="0"/>
           </convert>
          </fn>
         </att>
         <valueOf flags="l">
          <str val=" Timeline "/>
         </valueOf>
        </sequence>
       </elem>
      </sequence>
     </choose>
     <choose ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="118">
      <fn name="exists">
       <filter flags="b">
        <slash simple="1">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
          <dot flags="a"/>
         </treat>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
        <vc op="eq" comp="CCC">
         <fn name="namespace-uri">
          <dot type="element()"/>
         </fn>
         <str val="http://rhizomik.net/s5t/s5t.owl#"/>
        </vc>
       </filter>
      </fn>
      <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="121" name="a" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
       <sequence>
        <att name="class" flags="l">
         <str val="specific"/>
        </att>
        <att name="href" flags="l">
         <str val="#"/>
        </att>
        <att name="onclick" flags="l">
         <fn name="concat">
          <str val="javascript:rhz.callServiceOnResource('Player', '/services/player/player.jsp', '"/>
          <convert from="xs:untypedAtomic" to="xs:string">
           <varRef name="resource" slot="0"/>
          </convert>
          <str val="'); return false;"/>
         </fn>
        </att>
        <att name="title" flags="l">
         <fn name="concat">
          <str val="Play "/>
          <convert from="xs:untypedAtomic" to="xs:string">
           <varRef name="resource" slot="0"/>
          </convert>
         </fn>
        </att>
        <valueOf flags="l">
         <str val=" - Play "/>
        </valueOf>
       </sequence>
      </elem>
     </choose>
    </sequence>
   </let>
  </template>
 </co>
 <co id="11" binds="22">
  <template name="Q{}get-ns" flags="os" line="949" module="rdf2html.xsl" slots="2">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="950">
    <param name="Q{}uri" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <choose line="952">
     <fn name="contains">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:contains">
       <check card="?" diag="0|0||fn:contains">
        <cvUntyped to="xs:string">
         <data>
          <varRef name="uri" slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <str val="#"/>
     </fn>
     <valueOf line="953">
      <fn name="concat">
       <fn name="substring-before">
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-before">
         <check card="?" diag="0|0||fn:substring-before">
          <cvUntyped to="xs:string">
           <data>
            <varRef name="uri" slot="0"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <str val="#"/>
       </fn>
       <str val="#"/>
      </fn>
     </valueOf>
     <true/>
     <let line="956" var="ns-without-slash" as="document-node()" slot="1" eval="7">
      <doc line="957" validation="preserve">
       <callT name="substring-before-last" bSlot="0">
        <withParam name="Q{}text" flags="c">
         <varRef line="958" name="uri" slot="0"/>
        </withParam>
        <withParam name="Q{}chars" flags="c" as="xs:string">
         <str val="/"/>
        </withParam>
       </callT>
      </doc>
      <valueOf line="962">
       <fn name="concat">
        <data>
         <varRef name="ns-without-slash" slot="1"/>
        </data>
        <str val="/"/>
       </fn>
      </valueOf>
     </let>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="19" binds="8">
  <template name="Q{}attributes" flags="os" line="241" module="rdf2html.xsl" slots="0">
   <forEach role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="242">
    <sort>
     <filter role="select" flags="b">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </slash>
      <vc op="ne" onEmpty="1" comp="CCC">
       <fn name="namespace-uri">
        <dot type="attribute()"/>
       </fn>
       <str val="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
      </vc>
     </filter>
     <sortKey line="244" comp="CCC">
      <fn role="select" name="local-name">
       <dot type="attribute()"/>
      </fn>
      <str role="order" val="ascending"/>
      <str role="lang" val=""/>
      <str role="caseOrder" val="#default"/>
      <str role="stable" val="yes"/>
      <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
     </sortKey>
    </sort>
    <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="247" name="tr" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
     <sequence>
      <elem name="td" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
       <callT name="resourceDetailLink" bSlot="0">
        <withParam name="Q{}property" flags="c" as="xs:string">
         <str val=""/>
        </withParam>
        <withParam name="Q{}namespace" flags="c" as="xs:anyURI">
         <fn line="249" name="namespace-uri">
          <dot type="attribute()"/>
         </fn>
        </withParam>
        <withParam name="Q{}localname" flags="c" as="xs:string">
         <fn line="250" name="local-name">
          <dot type="attribute()"/>
         </fn>
        </withParam>
       </callT>
      </elem>
      <elem line="253" name="td" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="#">
       <sequence>
        <att name="property" flags="l">
         <fn name="name">
          <dot type="attribute()"/>
         </fn>
        </att>
        <valueOf line="254" flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <dot type="attribute()"/>
          </data>
         </convert>
        </valueOf>
       </sequence>
      </elem>
     </sequence>
    </elem>
   </forEach>
  </template>
 </co>
 <co id="22" binds="22">
  <template name="Q{}substring-before-last" flags="os" line="901" module="rdf2html.xsl" slots="5">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="902">
    <param name="Q{}text" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <param line="903" name="Q{}chars" slot="1">
     <str role="select" val=""/>
     <supplied role="conversion" slot="1"/>
    </param>
    <choose line="905">
     <fn name="contains">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:contains">
       <check card="?" diag="0|0||fn:contains">
        <cvUntyped to="xs:string">
         <data>
          <varRef name="text" slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:contains">
       <check card="?" diag="0|1||fn:contains">
        <cvUntyped to="xs:string">
         <data>
          <varRef name="chars" slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </fn>
     <let line="906" var="before" as="xs:string" slot="2" eval="8">
      <fn name="substring-before">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-before">
        <check card="?" diag="0|0||fn:substring-before">
         <cvUntyped to="xs:string">
          <data>
           <varRef name="text" slot="0"/>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:substring-before">
        <check card="?" diag="0|1||fn:substring-before">
         <cvUntyped to="xs:string">
          <data>
           <varRef name="chars" slot="1"/>
          </data>
         </cvUntyped>
        </check>
       </treat>
      </fn>
      <let line="907" var="after" as="xs:string" slot="3" eval="8">
       <fn name="substring-after">
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-after">
         <check card="?" diag="0|0||fn:substring-after">
          <cvUntyped to="xs:string">
           <data>
            <varRef name="text" slot="0"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:substring-after">
         <check card="?" diag="0|1||fn:substring-after">
          <cvUntyped to="xs:string">
           <data>
            <varRef name="chars" slot="1"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
       </fn>
       <choose line="909">
        <fn name="contains">
         <varRef name="after" slot="3"/>
         <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:contains">
          <check card="?" diag="0|1||fn:contains">
           <cvUntyped to="xs:string">
            <data>
             <varRef name="chars" slot="1"/>
            </data>
           </cvUntyped>
          </check>
         </treat>
        </fn>
        <let line="910" var="before-last" as="document-node()" slot="4" eval="7">
         <doc line="911" validation="preserve">
          <callT name="substring-before-last" bSlot="0">
           <withParam name="Q{}text" flags="c" as="xs:string">
            <varRef line="912" name="after" slot="3"/>
           </withParam>
           <withParam name="Q{}chars" flags="c">
            <varRef line="913" name="chars" slot="1"/>
           </withParam>
          </callT>
         </doc>
         <valueOf line="916">
          <fn name="concat">
           <varRef name="before" slot="2"/>
           <fn name="concat">
            <atomSing card="?" diag="0|0||fn:concat">
             <varRef name="chars" slot="1"/>
            </atomSing>
            <data>
             <varRef name="before-last" slot="4"/>
            </data>
           </fn>
          </fn>
         </valueOf>
        </let>
        <true/>
        <valueOf line="919">
         <varRef name="before" slot="2"/>
        </valueOf>
       </choose>
      </let>
     </let>
     <true/>
     <valueOf line="924">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <mergeAdj>
          <varRef name="text" slot="0"/>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </valueOf>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="18" binds="2 8 23">
  <template name="Q{}header" flags="os" line="177" module="rdf2html.xsl" slots="0">
   <choose role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="180">
    <or op="or">
     <or op="or">
      <fn name="exists">
       <slash simple="1">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
         <dot flags="a"/>
        </treat>
        <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
       </slash>
      </fn>
      <vc op="ne" onEmpty="1" comp="CCC">
       <fn name="local-name">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
         <dot flags="a"/>
        </treat>
       </fn>
       <str val="Description"/>
      </vc>
     </or>
     <fn name="exists">
      <filter flags="b">
       <slash simple="1">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
         <dot flags="a"/>
        </treat>
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </slash>
       <and op="and">
        <vc op="eq" onEmpty="0" comp="CCC">
         <fn name="namespace-uri">
          <dot type="element()"/>
         </fn>
         <str val="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
        </vc>
        <vc op="eq" onEmpty="0" comp="CCC">
         <fn name="local-name">
          <dot type="element()"/>
         </fn>
         <str val="type"/>
        </vc>
       </and>
      </filter>
     </fn>
    </or>
    <sequence line="181">
     <choose>
      <fn name="exists">
       <slash simple="1">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
         <dot flags="a"/>
        </treat>
        <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
       </slash>
      </fn>
      <att line="183" name="about">
       <convert from="xs:untypedAtomic" to="xs:string">
        <cast as="xs:untypedAtomic" emptiable="0">
         <fn name="string-join">
          <convert from="xs:untypedAtomic" to="xs:string">
           <data>
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
              <dot flags="a"/>
             </treat>
             <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
            </slash>
           </data>
          </convert>
          <str val=" "/>
         </fn>
        </cast>
       </convert>
      </att>
     </choose>
     <choose line="186">
      <vc op="ne" onEmpty="1" comp="CCC">
       <fn name="local-name">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
         <dot flags="a"/>
        </treat>
       </fn>
       <str val="Description"/>
      </vc>
      <att line="188" name="typeof">
       <fn name="string-join">
        <convert from="xs:anyAtomicType" to="xs:string">
         <data>
          <mergeAdj>
           <callT name="curie" bSlot="0">
            <withParam name="Q{}uri" flags="c" as="xs:string">
             <fn line="189" name="concat">
              <fn name="namespace-uri">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:namespace-uri">
                <dot flags="a"/>
               </treat>
              </fn>
              <fn name="local-name">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
                <dot flags="a"/>
               </treat>
              </fn>
             </fn>
            </withParam>
           </callT>
          </mergeAdj>
         </data>
        </convert>
        <str val=""/>
       </fn>
      </att>
     </choose>
     <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="194" name="tr" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
      <elem name="th" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
       <sequence>
        <att name="colspan" flags="l">
         <str val="2"/>
        </att>
        <choose line="195">
         <fn name="exists">
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
            <dot flags="a"/>
           </treat>
           <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
          </slash>
         </fn>
         <callT line="196" name="resourceDetailLink" bSlot="1">
          <withParam name="Q{}property" flags="c" as="xs:string">
           <str val="about"/>
          </withParam>
          <withParam name="Q{}namespace" flags="c" as="xs:string">
           <str val=""/>
          </withParam>
          <withParam name="Q{}localname" flags="c" as="attribute()*">
           <slash line="199" simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="attribute" nodeTest="((((attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about)) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}aboutEach)) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}aboutEachPrefix)) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}bagID))" jsTest="function a() {function a() {function a() {function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='aboutEach';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='aboutEachPrefix';};return a()||b();};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='bagID';};return a()||b();"/>
           </slash>
          </withParam>
         </callT>
        </choose>
        <callT line="202" name="types" bSlot="2"/>
       </sequence>
      </elem>
     </elem>
    </sequence>
    <true/>
    <att line="208" name="typeof">
     <str val="rdfs:Resource"/>
    </att>
   </choose>
  </template>
 </co>
 <co id="10" vis="PUBLIC" binds="">
  <globalParam name="Q{}language" type="item()*" line="25" module="rdf2html.xsl" visibility="PUBLIC" jsAcceptor="return val;" jsCardCheck="function c() {return true;};">
   <doc ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="25" flags="t" text="en" validation="preserve">
    <valueOf flags="Sl">
     <str val="en"/>
    </valueOf>
   </doc>
  </globalParam>
 </co>
 <co id="12" binds="24">
  <template name="Q{}get-name" flags="os" line="967" module="rdf2html.xsl" slots="1">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="968">
    <param name="Q{}uri" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <choose line="970">
     <fn name="contains">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:contains">
       <check card="?" diag="0|0||fn:contains">
        <cvUntyped to="xs:string">
         <data>
          <varRef name="uri" slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <str val="#"/>
     </fn>
     <valueOf line="971">
      <fn name="substring-after">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-after">
        <check card="?" diag="0|0||fn:substring-after">
         <cvUntyped to="xs:string">
          <data>
           <varRef name="uri" slot="0"/>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <str val="#"/>
      </fn>
     </valueOf>
     <true/>
     <callT line="974" name="substring-after-last" bSlot="0" flags="t">
      <withParam name="Q{}text" flags="c">
       <varRef line="975" name="uri" slot="0"/>
      </withParam>
      <withParam name="Q{}chars" flags="c" as="xs:string">
       <str val="/"/>
      </withParam>
     </callT>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="2" binds="11 12">
  <template name="Q{}curie" flags="os" line="998" module="rdf2html.xsl" slots="5">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="999">
    <param name="Q{}uri" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <let line="1000" var="namespace" as="document-node()" slot="1" eval="7">
     <doc line="1001" validation="preserve">
      <callT name="get-ns" bSlot="0">
       <withParam name="Q{}uri" flags="c">
        <varRef line="1002" name="uri" slot="0"/>
       </withParam>
      </callT>
     </doc>
     <let line="1011" var="vv:v0" as="xs:string" slot="2" eval="13">
      <cast as="xs:string" emptiable="0">
       <data>
        <varRef name="namespace" slot="1"/>
       </data>
      </cast>
      <let line="1005" var="localname" as="document-node()" slot="3" eval="7">
       <doc line="1006" validation="preserve">
        <callT name="get-name" bSlot="1">
         <withParam name="Q{}uri" flags="c">
          <varRef line="1007" name="uri" slot="0"/>
         </withParam>
        </callT>
       </doc>
       <choose line="1011">
        <fn name="exists">
         <filter flags="b">
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|8|XPTY0020|">
            <dot flags="a"/>
           </treat>
           <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
          </slash>
          <and op="and">
           <vc op="eq" onEmpty="0" comp="CCC">
            <data>
             <dot type="namespace-node()"/>
            </data>
            <varRef name="vv:v0" slot="2"/>
           </vc>
           <fn name="name">
            <dot type="namespace-node()"/>
           </fn>
          </and>
         </filter>
        </fn>
        <let line="1013" var="vv:v1" as="xs:string" slot="4" eval="13">
         <cast as="xs:string" emptiable="0">
          <data>
           <varRef name="namespace" slot="1"/>
          </data>
         </cast>
         <valueOf line="1015">
          <fn line="1013" name="concat">
           <fn name="concat">
            <cast as="xs:untypedAtomic" emptiable="0">
             <fn name="name">
              <check card="?" diag="0|0||fn:name">
               <filter flags="b">
                <slash simple="1">
                 <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|8|XPTY0020|">
                  <dot flags="a"/>
                 </treat>
                 <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
                </slash>
                <and op="and">
                 <vc op="eq" onEmpty="0" comp="CCC">
                  <data>
                   <dot type="namespace-node()"/>
                  </data>
                  <varRef name="vv:v1" slot="4"/>
                 </vc>
                 <fn name="name">
                  <dot type="namespace-node()"/>
                 </fn>
                </and>
               </filter>
              </check>
             </fn>
            </cast>
            <str val=":"/>
           </fn>
           <data line="1015">
            <varRef name="localname" slot="3"/>
           </data>
          </fn>
         </valueOf>
        </let>
        <vc line="1017" op="eq" onEmpty="0" comp="CCC">
         <cast as="xs:string" emptiable="0">
          <data>
           <varRef name="namespace" slot="1"/>
          </data>
         </cast>
         <str val="http://www.w3.org/2001/XMLSchema#"/>
        </vc>
        <valueOf line="1018">
         <fn name="concat">
          <str val="xsd:"/>
          <data>
           <varRef name="localname" slot="3"/>
          </data>
         </fn>
        </valueOf>
        <fn line="1020" name="exists">
         <filter flags="b">
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|8|XPTY0020|">
            <dot flags="a"/>
           </treat>
           <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
          </slash>
          <fn name="not">
           <fn name="name">
            <dot type="namespace-node()"/>
           </fn>
          </fn>
         </filter>
        </fn>
        <valueOf line="1021">
         <fn name="concat">
          <str val="base:"/>
          <data>
           <varRef name="localname" slot="3"/>
          </data>
         </fn>
        </valueOf>
        <true/>
        <valueOf line="1024">
         <fn name="concat">
          <fn name="concat">
           <fn name="generate-id">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:generate-id">
             <dot flags="a"/>
            </treat>
           </fn>
           <str val=":"/>
          </fn>
          <data>
           <varRef name="localname" slot="3"/>
          </data>
         </fn>
        </valueOf>
       </choose>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="24" binds="24">
  <template name="Q{}substring-after-last" flags="os" line="884" module="rdf2html.xsl" slots="2">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="885">
    <param name="Q{}text" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <param line="886" name="Q{}chars" slot="1">
     <str role="select" val=""/>
     <supplied role="conversion" slot="1"/>
    </param>
    <choose line="888">
     <fn name="contains">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:contains">
       <check card="?" diag="0|0||fn:contains">
        <cvUntyped to="xs:string">
         <data>
          <varRef name="text" slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:contains">
       <check card="?" diag="0|1||fn:contains">
        <cvUntyped to="xs:string">
         <data>
          <varRef name="chars" slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </fn>
     <callT line="890" name="substring-after-last" bSlot="0" flags="t">
      <withParam name="Q{}text" flags="c" as="xs:string">
       <fn line="889" name="substring-after">
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-after">
         <check card="?" diag="0|0||fn:substring-after">
          <cvUntyped to="xs:string">
           <data>
            <varRef name="text" slot="0"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:substring-after">
         <check card="?" diag="0|1||fn:substring-after">
          <cvUntyped to="xs:string">
           <data>
            <varRef name="chars" slot="1"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
       </fn>
      </withParam>
      <withParam name="Q{}chars" flags="c">
       <varRef line="892" name="chars" slot="1"/>
      </withParam>
     </callT>
     <true/>
     <valueOf line="896">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <mergeAdj>
          <varRef name="text" slot="0"/>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </valueOf>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="23" binds="8 6">
  <template name="Q{}types" flags="os" line="214" module="rdf2html.xsl" slots="0">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="216">
    <choose>
     <and op="and">
      <fn name="exists">
       <slash simple="1">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
         <dot flags="a"/>
        </treat>
        <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
       </slash>
      </fn>
      <or op="or">
       <vc op="ne" onEmpty="1" comp="CCC">
        <fn name="local-name">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
          <dot flags="a"/>
         </treat>
        </fn>
        <str val="Description"/>
       </vc>
       <fn name="exists">
        <filter flags="b">
         <slash simple="1">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
           <dot flags="a"/>
          </treat>
          <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         </slash>
         <and op="and">
          <vc op="eq" onEmpty="0" comp="CCC">
           <fn name="namespace-uri">
            <dot type="element()"/>
           </fn>
           <str val="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
          </vc>
          <vc op="eq" onEmpty="0" comp="CCC">
           <fn name="local-name">
            <dot type="element()"/>
           </fn>
           <str val="type"/>
          </vc>
         </and>
        </filter>
       </fn>
      </or>
     </and>
     <elem line="217" name="div" nsuri="" namespaces="rdf rdfs">
      <sequence>
       <att name="class" flags="l">
        <str val="connector"/>
       </att>
       <valueOf flags="l">
        <str val=" a "/>
       </valueOf>
      </sequence>
     </elem>
    </choose>
    <choose line="220">
     <vc op="ne" onEmpty="1" comp="CCC">
      <fn name="local-name">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
        <dot flags="a"/>
       </treat>
      </fn>
      <str val="Description"/>
     </vc>
     <sequence line="221">
      <callT name="resourceDetailLink" bSlot="0">
       <withParam name="Q{}property" flags="c" as="xs:string">
        <str val="type"/>
       </withParam>
       <withParam name="Q{}namespace" flags="c" as="xs:anyURI">
        <fn line="223" name="namespace-uri">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:namespace-uri">
          <dot flags="a"/>
         </treat>
        </fn>
       </withParam>
       <withParam name="Q{}localname" flags="c" as="xs:string">
        <fn line="224" name="local-name">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
          <dot flags="a"/>
         </treat>
        </fn>
       </withParam>
      </callT>
      <choose line="226">
       <fn name="exists">
        <filter flags="b">
         <slash simple="1">
          <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
           <dot flags="a"/>
          </treat>
          <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         </slash>
         <and op="and">
          <vc op="eq" onEmpty="0" comp="CCC">
           <fn name="namespace-uri">
            <dot type="element()"/>
           </fn>
           <str val="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
          </vc>
          <vc op="eq" onEmpty="0" comp="CCC">
           <fn name="local-name">
            <dot type="element()"/>
           </fn>
           <str val="type"/>
          </vc>
         </and>
        </filter>
       </fn>
       <valueOf>
        <str val=", "/>
       </valueOf>
      </choose>
     </sequence>
    </choose>
    <forEach line="231">
     <filter flags="b">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </slash>
      <and op="and">
       <vc op="eq" onEmpty="0" comp="CCC">
        <fn name="namespace-uri">
         <dot type="element()"/>
        </fn>
        <str val="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
       </vc>
       <vc op="eq" onEmpty="0" comp="CCC">
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
        <str val="type"/>
       </vc>
      </and>
     </filter>
     <sequence ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="232">
      <elem name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
       <sequence>
        <att name="rel" flags="l">
         <str val="rdf:type"/>
        </att>
        <att name="class" flags="l">
         <str val="connector"/>
        </att>
        <callT line="233" name="property-objects" bSlot="1"/>
       </sequence>
      </elem>
      <choose ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="235">
       <fn name="exists">
        <filter flags="b">
         <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
         <and op="and">
          <vc op="eq" onEmpty="0" comp="CCC">
           <fn name="namespace-uri">
            <dot type="element()"/>
           </fn>
           <str val="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
          </vc>
          <vc op="eq" onEmpty="0" comp="CCC">
           <fn name="local-name">
            <dot type="element()"/>
           </fn>
           <str val="type"/>
          </vc>
         </and>
        </filter>
       </fn>
       <elem line="236" name="div" nsuri="" namespaces="rdf rdfs">
        <sequence>
         <att name="class" flags="l">
          <str val="connector"/>
         </att>
         <valueOf flags="l">
          <str val=", "/>
         </valueOf>
        </sequence>
       </elem>
      </choose>
     </sequence>
    </forEach>
   </sequence>
  </template>
 </co>
 <co id="4" binds="25 25 25">
  <template name="Q{}textDetailLink" flags="os" line="848" module="rdf2html.xsl" slots="5">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="849">
    <param name="Q{}property" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <param line="850" name="Q{}value" slot="1">
     <str role="select" val=""/>
     <supplied role="conversion" slot="1"/>
    </param>
    <choose line="852">
     <or op="or">
      <fn name="starts-with">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:starts-with">
        <check card="?" diag="0|0||fn:starts-with">
         <cvUntyped to="xs:string">
          <data>
           <varRef name="value" slot="1"/>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <str val="http://"/>
      </fn>
      <fn name="starts-with">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:starts-with">
        <check card="?" diag="0|0||fn:starts-with">
         <cvUntyped to="xs:string">
          <data>
           <varRef name="value" slot="1"/>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <str val="https://"/>
      </fn>
     </or>
     <let line="853" var="linkTextPrePre" as="document-node()" slot="2" eval="7">
      <doc line="854" validation="preserve">
       <callT name="replace-string" bSlot="0">
        <withParam name="Q{}text" flags="c">
         <varRef line="855" name="value" slot="1"/>
        </withParam>
        <withParam name="Q{}replace" flags="c" as="xs:string">
         <str val="_"/>
        </withParam>
        <withParam name="Q{}with" flags="c" as="xs:string">
         <str val=" "/>
        </withParam>
       </callT>
      </doc>
      <let line="860" var="linkTextPre" as="document-node()" slot="3" eval="7">
       <doc line="861" validation="preserve">
        <callT name="replace-string" bSlot="1">
         <withParam name="Q{}text" flags="c" as="document-node()">
          <varRef line="862" name="linkTextPrePre" slot="2"/>
         </withParam>
         <withParam name="Q{}replace" flags="c" as="xs:string">
          <str val="/"/>
         </withParam>
         <withParam name="Q{}with" flags="c" as="xs:string">
          <str val="/ "/>
         </withParam>
        </callT>
       </doc>
       <let line="867" var="linkText" as="document-node()" slot="4" eval="7">
        <doc line="868" validation="preserve">
         <callT name="replace-string" bSlot="2">
          <withParam name="Q{}text" flags="c" as="document-node()">
           <varRef line="869" name="linkTextPre" slot="3"/>
          </withParam>
          <withParam name="Q{}replace" flags="c" as="xs:string">
           <str val="/ / "/>
          </withParam>
          <withParam name="Q{}with" flags="c" as="xs:string">
           <str val="//"/>
          </withParam>
         </callT>
        </doc>
        <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="874" name="a" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
         <sequence>
          <att name="class" flags="l">
           <str val="browse"/>
          </att>
          <att name="href" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="value" slot="1"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </att>
          <att name="title" flags="l">
           <fn name="concat">
            <str val="Browse "/>
            <fn name="string-join">
             <convert from="xs:anyAtomicType" to="xs:string">
              <data>
               <mergeAdj>
                <varRef name="value" slot="1"/>
               </mergeAdj>
              </data>
             </convert>
             <str val=" "/>
            </fn>
           </fn>
          </att>
          <valueOf line="875" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <data>
             <varRef name="linkText" slot="4"/>
            </data>
           </convert>
          </valueOf>
         </sequence>
        </elem>
       </let>
      </let>
     </let>
     <true/>
     <valueOf line="879">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <dot flags="a"/>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </valueOf>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="8" binds="9 25 25 25">
  <template name="Q{}resourceDetailLink" flags="os" line="791" module="rdf2html.xsl" slots="8">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="792">
    <param name="Q{}property" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <param line="793" name="Q{}namespace" slot="1">
     <str role="select" val=""/>
     <supplied role="conversion" slot="1"/>
    </param>
    <param line="794" name="Q{}localname" slot="2">
     <str role="select" val=""/>
     <supplied role="conversion" slot="2"/>
    </param>
    <let line="795" var="uri" as="document-node()" slot="3" eval="7">
     <doc line="796" flags="t" validation="preserve">
      <valueOf flags="l">
       <fn name="concat">
        <atomSing card="?" diag="0|0||fn:concat">
         <varRef name="namespace" slot="1"/>
        </atomSing>
        <atomSing card="?" diag="0|1||fn:concat">
         <varRef name="localname" slot="2"/>
        </atomSing>
       </fn>
      </valueOf>
     </doc>
     <let line="798" var="linkName" as="document-node()" slot="4" eval="7">
      <doc line="799" validation="preserve">
       <callT name="getLabel" bSlot="0">
        <withParam name="Q{}uri" flags="c" as="document-node()">
         <varRef line="800" name="uri" slot="3"/>
        </withParam>
        <withParam name="Q{}property" flags="c">
         <varRef line="801" name="property" slot="0"/>
        </withParam>
       </callT>
      </doc>
      <let line="811" var="linkTextPrePre" as="document-node()" slot="5" eval="7">
       <doc line="812" validation="preserve">
        <callT name="replace-string" bSlot="1">
         <withParam name="Q{}text" flags="c" as="document-node()">
          <varRef line="813" name="linkName" slot="4"/>
         </withParam>
         <withParam name="Q{}replace" flags="c" as="xs:string">
          <str val="_"/>
         </withParam>
         <withParam name="Q{}with" flags="c" as="xs:string">
          <str val=" "/>
         </withParam>
        </callT>
       </doc>
       <let line="818" var="linkTextPre" as="document-node()" slot="6" eval="7">
        <doc line="820" validation="preserve">
         <choose>
          <fn name="contains">
           <cvUntyped to="xs:string">
            <data>
             <varRef name="linkTextPrePre" slot="5"/>
            </data>
           </cvUntyped>
           <str val="://"/>
          </fn>
          <callT line="821" name="replace-string" bSlot="2">
           <withParam name="Q{}text" flags="c" as="document-node()">
            <varRef line="822" name="linkTextPrePre" slot="5"/>
           </withParam>
           <withParam name="Q{}replace" flags="c" as="xs:string">
            <str val="/"/>
           </withParam>
           <withParam name="Q{}with" flags="c" as="xs:string">
            <str val="/ "/>
           </withParam>
          </callT>
          <true/>
          <valueOf line="828" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <data>
             <varRef name="linkTextPrePre" slot="5"/>
            </data>
           </convert>
          </valueOf>
         </choose>
        </doc>
        <let line="832" var="linkText" as="document-node()" slot="7" eval="7">
         <doc line="833" validation="preserve">
          <callT name="replace-string" bSlot="3">
           <withParam name="Q{}text" flags="c" as="document-node()">
            <varRef line="834" name="linkTextPre" slot="6"/>
           </withParam>
           <withParam name="Q{}replace" flags="c" as="xs:string">
            <str val="/ / "/>
           </withParam>
           <withParam name="Q{}with" flags="c" as="xs:string">
            <str val="//"/>
           </withParam>
          </callT>
         </doc>
         <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="840" name="a" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
          <sequence>
           <att name="class" flags="l">
            <str val="browse"/>
           </att>
           <att name="href" flags="l">
            <convert from="xs:untypedAtomic" to="xs:string">
             <data>
              <varRef name="uri" slot="3"/>
             </data>
            </convert>
           </att>
           <att name="title" flags="l">
            <fn name="concat">
             <str val="Browse "/>
             <convert from="xs:untypedAtomic" to="xs:string">
              <data>
               <varRef name="uri" slot="3"/>
              </data>
             </convert>
            </fn>
           </att>
           <valueOf line="841" flags="l">
            <convert from="xs:untypedAtomic" to="xs:string">
             <data>
              <varRef name="linkText" slot="7"/>
             </data>
            </convert>
           </valueOf>
          </sequence>
         </elem>
        </let>
       </let>
      </let>
     </let>
    </let>
   </sequence>
  </template>
 </co>
 <co id="25" binds="25">
  <template name="Q{}replace-string" flags="os" line="929" module="rdf2html.xsl" slots="3">
   <sequence role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="930">
    <param name="Q{}text" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <param line="931" name="Q{}replace" slot="1">
     <str role="select" val=""/>
     <supplied role="conversion" slot="1"/>
    </param>
    <param line="932" name="Q{}with" slot="2">
     <str role="select" val=""/>
     <supplied role="conversion" slot="2"/>
    </param>
    <choose line="934">
     <fn name="contains">
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:contains">
       <check card="?" diag="0|0||fn:contains">
        <cvUntyped to="xs:string">
         <data>
          <varRef name="text" slot="0"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
      <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:contains">
       <check card="?" diag="0|1||fn:contains">
        <cvUntyped to="xs:string">
         <data>
          <varRef name="replace" slot="1"/>
         </data>
        </cvUntyped>
       </check>
      </treat>
     </fn>
     <sequence line="935">
      <valueOf>
       <fn name="substring-before">
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-before">
         <check card="?" diag="0|0||fn:substring-before">
          <cvUntyped to="xs:string">
           <data>
            <varRef name="text" slot="0"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:substring-before">
         <check card="?" diag="0|1||fn:substring-before">
          <cvUntyped to="xs:string">
           <data>
            <varRef name="replace" slot="1"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
       </fn>
      </valueOf>
      <valueOf line="936">
       <fn name="string-join">
        <convert from="xs:anyAtomicType" to="xs:string">
         <data>
          <mergeAdj>
           <varRef name="with" slot="2"/>
          </mergeAdj>
         </data>
        </convert>
        <str val=" "/>
       </fn>
      </valueOf>
      <callT line="937" name="replace-string" bSlot="0" flags="t">
       <withParam name="Q{}text" flags="c" as="xs:string">
        <fn line="938" name="substring-after">
         <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-after">
          <check card="?" diag="0|0||fn:substring-after">
           <cvUntyped to="xs:string">
            <data>
             <varRef name="text" slot="0"/>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|1||fn:substring-after">
          <check card="?" diag="0|1||fn:substring-after">
           <cvUntyped to="xs:string">
            <data>
             <varRef name="replace" slot="1"/>
            </data>
           </cvUntyped>
          </check>
         </treat>
        </fn>
       </withParam>
       <withParam name="Q{}replace" flags="c">
        <varRef line="939" name="replace" slot="1"/>
       </withParam>
       <withParam name="Q{}with" flags="c">
        <varRef line="940" name="with" slot="2"/>
       </withParam>
      </callT>
     </sequence>
     <true/>
     <valueOf line="944">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <mergeAdj>
          <varRef name="text" slot="0"/>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </valueOf>
    </choose>
   </sequence>
  </template>
 </co>
 <co id="17" binds="17">
  <mode name="Q{}copy-subtree" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="1029" module="rdf2html.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <copy role="action" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="1031" flags="cin">
     <applyT role="content" mode="Q{}copy-subtree" bSlot="0">
      <union role="select" op="|">
       <sequence>
        <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </sequence>
       <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
      </union>
     </applyT>
    </copy>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="1029" module="rdf2html.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <copy role="action" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="1031" flags="cin">
     <applyT role="content" mode="Q{}copy-subtree" bSlot="0">
      <union role="select" op="|">
       <sequence>
        <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </sequence>
       <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
      </union>
     </applyT>
    </copy>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="1029" module="rdf2html.xsl">
    <p.nodeTest role="match" test="text()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;"/>
    <copy role="action" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="1031" flags="cin">
     <applyT role="content" mode="Q{}copy-subtree" bSlot="0">
      <union role="select" op="|">
       <sequence>
        <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </sequence>
       <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
      </union>
     </applyT>
    </copy>
   </templateRule>
  </mode>
 </co>
 <co id="16" binds="2 3 4 6 6 5 16">
  <template name="Q{}ListItems" flags="os" line="324" module="rdf2html.xsl" slots="3">
   <elem role="body" ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="325" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
    <sequence>
     <att name="typeof" flags="l">
      <str val="rdf:List"/>
     </att>
     <elem line="326" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
      <sequence>
       <att name="class" flags="l">
        <str val="list-object"/>
       </att>
       <choose line="328">
        <and op="and">
         <and op="and">
          <fn name="exists">
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
           </slash>
          </fn>
          <fn name="empty">
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
           </slash>
          </fn>
         </and>
         <fn name="empty">
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
            <dot flags="a"/>
           </treat>
           <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='parseType';"/>
          </slash>
         </fn>
        </and>
        <sequence line="330">
         <att name="property" flags="l">
          <str val="rdf:first"/>
         </att>
         <att line="333" name="content" flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <cast as="xs:untypedAtomic" emptiable="0">
            <fn name="string-join">
             <convert from="xs:anyAtomicType" to="xs:string">
              <data>
               <dot flags="a"/>
              </data>
             </convert>
             <str val=" "/>
            </fn>
           </cast>
          </convert>
         </att>
         <choose line="335">
          <fn name="exists">
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
           </slash>
          </fn>
          <att line="337" name="xml:lang" nsuri="http://www.w3.org/XML/1998/namespace" flags="l">
           <convert from="xs:untypedAtomic" to="xs:string">
            <cast as="xs:untypedAtomic" emptiable="0">
             <fn name="string">
              <convert from="xs:untypedAtomic" to="xs:string">
               <data>
                <slash simple="1">
                 <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                  <dot flags="a"/>
                 </treat>
                 <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
                </slash>
               </data>
              </convert>
             </fn>
            </cast>
           </convert>
          </att>
         </choose>
         <choose line="340">
          <fn name="exists">
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
           </slash>
          </fn>
          <sequence line="342">
           <att name="datatype" flags="l">
            <fn name="string-join">
             <convert from="xs:anyAtomicType" to="xs:string">
              <data>
               <mergeAdj>
                <callT name="curie" bSlot="0">
                 <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
                  <slash line="343" simple="1">
                   <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                    <dot flags="a"/>
                   </treat>
                   <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                  </slash>
                 </withParam>
                </callT>
               </mergeAdj>
              </data>
             </convert>
             <str val=""/>
            </fn>
           </att>
           <let line="346" var="datatype-xmlns" as="document-node()" slot="0" eval="7">
            <doc line="347" validation="preserve">
             <callT name="xmlns" bSlot="1">
              <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
               <slash line="348" simple="1">
                <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                 <dot flags="a"/>
                </treat>
                <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
               </slash>
              </withParam>
             </callT>
            </doc>
            <copyOf line="351" flags="vc">
             <slash>
              <slash simple="1">
               <varRef name="datatype-xmlns" slot="0"/>
               <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
              </slash>
              <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
             </slash>
            </copyOf>
           </let>
          </sequence>
         </choose>
         <callT line="353" name="textDetailLink" bSlot="2">
          <withParam name="Q{}property" flags="c" as="xs:string">
           <str val="first"/>
          </withParam>
          <withParam name="Q{}value" flags="c" as="item()">
           <dot line="355" flags="a"/>
          </withParam>
         </callT>
        </sequence>
        <let line="361" var="vv:cc-1157019217" as="xs:untypedAtomic?" slot="1" eval="13">
         <data>
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
            <dot flags="a"/>
           </treat>
           <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='parseType';"/>
          </slash>
         </data>
         <or op="or">
          <gc op="=" card="1:1" comp="CCC">
           <varRef name="vv:cc-1157019217" slot="1"/>
           <str val="Literal"/>
          </gc>
          <and op="and">
           <fn name="empty">
            <slash simple="1">
             <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
              <dot flags="a"/>
             </treat>
             <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
            </slash>
           </fn>
           <and op="and">
            <and op="and">
             <fn name="not">
              <fn name="exists">
               <slash simple="1">
                <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                 <dot flags="a"/>
                </treat>
                <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}resource)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='resource';"/>
               </slash>
              </fn>
             </fn>
             <fn name="not">
              <fn name="exists">
               <slash simple="1">
                <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                 <dot flags="a"/>
                </treat>
                <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}nodeID)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='nodeID';"/>
               </slash>
              </fn>
             </fn>
            </and>
            <fn name="not">
             <gc op="=" card="1:1" comp="CCC">
              <varRef name="vv:cc-1157019217" slot="1"/>
              <str val="Resource"/>
             </gc>
            </fn>
           </and>
          </and>
         </or>
        </let>
        <sequence line="363">
         <att name="property" flags="l">
          <str val="rdf:first"/>
         </att>
         <callT line="365" name="property-objects" bSlot="3"/>
        </sequence>
        <true/>
        <sequence line="369">
         <att name="rel" flags="l">
          <str val="rdf:first"/>
         </att>
         <callT line="371" name="property-objects" bSlot="4"/>
        </sequence>
       </choose>
      </sequence>
     </elem>
     <elem line="377" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
      <sequence>
       <att name="class" flags="l">
        <str val="list-object"/>
       </att>
       <att name="rel" flags="l">
        <str val="rdf:rest"/>
       </att>
       <choose line="379">
        <fn name="exists">
         <slash>
          <slash>
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|9|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="parent" nodeTest="(document-node()|element())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
           </slash>
           <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}rest)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='rest';"/>
          </slash>
          <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}first)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='first';"/>
         </slash>
        </fn>
        <let line="381" var="vv:cc1213008562" as="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}rest)*" slot="2" eval="4">
         <slash>
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|9|XPTY0020|">
            <dot flags="a"/>
           </treat>
           <axis name="parent" nodeTest="(document-node()|element())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
          </slash>
          <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}rest)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='rest';"/>
         </slash>
         <sequence line="380">
          <callT name="connector" bSlot="5">
           <withParam name="Q{}criteria" flags="c" as="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}first)*">
            <slash line="381">
             <varRef name="vv:cc1213008562" slot="2"/>
             <axis name="descendant" nodeTest="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}first)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='first';"/>
            </slash>
           </withParam>
          </callT>
          <forEach line="383">
           <slash>
            <varRef name="vv:cc1213008562" slot="2"/>
            <first>
             <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}first)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='first';"/>
            </first>
           </slash>
           <callT line="384" name="ListItems" bSlot="6"/>
          </forEach>
         </sequence>
        </let>
        <true/>
        <att line="388" name="resource" flags="l">
         <str val="[rdf:nil]"/>
        </att>
       </choose>
      </sequence>
     </elem>
    </sequence>
   </elem>
  </template>
 </co>
 <co id="26" binds="18 19 20">
  <template name="Q{}rdfDescription" flags="os" line="67" module="rdf2html.xsl" slots="0">
   <choose role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="72">
    <or op="or">
     <or op="or">
      <and op="and">
       <fn name="empty">
        <slash simple="1">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|7|XPTY0020|">
          <dot flags="a"/>
         </treat>
         <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </fn>
       <fn name="empty">
        <slash simple="1">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|11|XPTY0020|">
          <dot flags="a"/>
         </treat>
         <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
       </fn>
      </and>
      <vc op="ne" onEmpty="1" comp="CCC">
       <fn name="local-name">
        <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="0|0||fn:local-name">
         <dot flags="a"/>
        </treat>
       </fn>
       <str val="Description"/>
      </vc>
     </or>
     <fn name="exists">
      <sequence>
       <filter flags="b">
        <slash simple="1">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
          <dot flags="a"/>
         </treat>
         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        </slash>
        <and op="and">
         <vc op="ne" onEmpty="1" comp="CCC">
          <fn name="name">
           <dot type="element()"/>
          </fn>
          <str val="http://www.w3.org/2000/01/rdf-schema#"/>
         </vc>
         <vc op="ne" onEmpty="1" comp="CCC">
          <fn name="local-name">
           <dot type="element()"/>
          </fn>
          <str val="label"/>
         </vc>
        </and>
       </filter>
       <filter flags="b">
        <slash simple="1">
         <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
          <dot flags="a"/>
         </treat>
         <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
        </slash>
        <and op="and">
         <vc op="ne" onEmpty="1" comp="CCC">
          <fn name="namespace-uri">
           <dot type="attribute()"/>
          </fn>
          <str val="http://www.w3.org/2000/01/rdf-schema#"/>
         </vc>
         <and op="and">
          <vc op="ne" onEmpty="1" comp="CCC">
           <fn name="local-name">
            <dot type="attribute()"/>
           </fn>
           <str val="label"/>
          </vc>
          <vc op="ne" onEmpty="1" comp="CCC">
           <fn name="local-name">
            <dot type="attribute()"/>
           </fn>
           <str val="about"/>
          </vc>
         </and>
        </and>
       </filter>
      </sequence>
     </fn>
    </or>
    <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="73" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
     <sequence>
      <att name="class" flags="l">
       <str val="description"/>
      </att>
      <elem line="75" name="table" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
       <sequence>
        <choose>
         <fn name="exists">
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
            <dot flags="a"/>
           </treat>
           <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
          </slash>
         </fn>
         <att line="77" name="about" flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <cast as="xs:untypedAtomic" emptiable="0">
            <fn name="string-join">
             <convert from="xs:untypedAtomic" to="xs:string">
              <data>
               <slash simple="1">
                <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
                 <dot flags="a"/>
                </treat>
                <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
               </slash>
              </data>
             </convert>
             <str val=" "/>
            </fn>
           </cast>
          </convert>
         </att>
        </choose>
        <callT line="80" name="header" bSlot="0"/>
        <callT line="81" name="attributes" bSlot="1"/>
        <callT line="82" name="properties" bSlot="2"/>
       </sequence>
      </elem>
     </sequence>
    </elem>
   </choose>
  </template>
 </co>
 <co id="20" binds="2 1 8 2 3 4 5 2 3 4 5 2 3 8 6 6 6 5 6 5">
  <template name="Q{}properties" flags="os" line="405" module="rdf2html.xsl" slots="25">
   <forEach role="body" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="406">
    <sort>
     <filter role="select" flags="b">
      <slash simple="1">
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </slash>
      <or op="or">
       <vc op="ne" onEmpty="1" comp="CCC">
        <fn name="namespace-uri">
         <dot type="element()"/>
        </fn>
        <str val="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
       </vc>
       <vc op="ne" onEmpty="1" comp="CCC">
        <fn name="local-name">
         <dot type="element()"/>
        </fn>
        <str val="type"/>
       </vc>
      </or>
     </filter>
     <sortKey line="407" comp="CCC">
      <fn role="select" name="local-name">
       <dot type="element()"/>
      </fn>
      <str role="order" val="ascending"/>
      <str role="lang" val=""/>
      <str role="caseOrder" val="#default"/>
      <str role="stable" val="yes"/>
      <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
     </sortKey>
    </sort>
    <let line="408" var="property-name" as="xs:untypedAtomic" slot="0" eval="7">
     <cast line="409" as="xs:untypedAtomic" emptiable="0">
      <fn name="local-name">
       <dot type="element()"/>
      </fn>
     </cast>
     <let line="540" var="vv:v9" as="xs:string" slot="1" eval="13">
      <cast as="xs:string" emptiable="0">
       <varRef name="property-name" slot="0"/>
      </cast>
      <let line="411" var="property-namespace" as="xs:untypedAtomic" slot="2" eval="8">
       <convert line="412" from="xs:anyURI" to="xs:untypedAtomic">
        <fn name="namespace-uri">
         <dot type="element()"/>
        </fn>
       </convert>
       <let line="540" var="vv:v10" as="xs:anyURI" slot="3" eval="13">
        <cast as="xs:anyURI" emptiable="0">
         <varRef name="property-namespace" slot="2"/>
        </cast>
        <let line="414" var="propertyCurie" as="document-node()" slot="4" eval="7">
         <doc line="415" validation="preserve">
          <callT name="curie" bSlot="0">
           <withParam name="Q{}uri" flags="c" as="xs:string">
            <fn line="416" name="concat">
             <fn name="namespace-uri">
              <dot type="element()"/>
             </fn>
             <fn name="local-name">
              <dot type="element()"/>
             </fn>
            </fn>
           </withParam>
          </callT>
         </doc>
         <choose line="421">
          <and op="and">
           <and op="and">
            <fn name="exists">
             <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
            </fn>
            <fn name="empty">
             <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
            </fn>
           </and>
           <fn name="empty">
            <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='parseType';"/>
           </fn>
          </and>
          <let line="422" var="isPreferredLanguage" as="document-node()" slot="5" eval="7">
           <doc line="423" validation="preserve">
            <callT name="isPreferredLanguage" bSlot="1"/>
           </doc>
           <choose line="427">
            <vc op="eq" onEmpty="0" comp="CCC">
             <cast as="xs:string" emptiable="0">
              <data>
               <varRef name="isPreferredLanguage" slot="5"/>
              </data>
             </cast>
             <str val="true"/>
            </vc>
            <let line="430" var="vv:v1" as="xs:anyURI" slot="6" eval="13">
             <cast as="xs:anyURI" emptiable="0">
              <varRef name="property-namespace" slot="2"/>
             </cast>
             <let var="vv:v0" as="xs:string" slot="7" eval="13">
              <cast as="xs:string" emptiable="0">
               <varRef name="property-name" slot="0"/>
              </cast>
              <choose>
               <fn name="exists">
                <filter flags="b">
                 <slash simple="1">
                  <dot type="element()"/>
                  <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                 </slash>
                 <and op="and">
                  <vc op="eq" onEmpty="0" comp="CCC">
                   <fn name="local-name">
                    <dot type="element()"/>
                   </fn>
                   <varRef name="vv:v0" slot="7"/>
                  </vc>
                  <vc op="eq" onEmpty="0" comp="CCC">
                   <fn name="namespace-uri">
                    <dot type="element()"/>
                   </fn>
                   <varRef name="vv:v1" slot="6"/>
                  </vc>
                 </and>
                </filter>
               </fn>
               <empty/>
               <true/>
               <let ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="504" var="vv:v8" as="xs:anyURI" slot="8" eval="13">
                <cast as="xs:anyURI" emptiable="0">
                 <varRef name="property-namespace" slot="2"/>
                </cast>
                <let var="vv:v7" as="xs:string" slot="9" eval="13">
                 <cast as="xs:string" emptiable="0">
                  <varRef name="property-name" slot="0"/>
                 </cast>
                 <let line="475" var="vv:v6" as="xs:string" slot="10" eval="13">
                  <convert from="xs:untypedAtomic" to="xs:string">
                   <data>
                    <varRef name="propertyCurie" slot="4"/>
                   </data>
                  </convert>
                  <let line="473" var="vv:v5" as="xs:anyURI" slot="11" eval="13">
                   <cast as="xs:anyURI" emptiable="0">
                    <varRef name="property-namespace" slot="2"/>
                   </cast>
                   <let var="vv:v4" as="xs:string" slot="12" eval="13">
                    <cast as="xs:string" emptiable="0">
                     <varRef name="property-name" slot="0"/>
                    </cast>
                    <let line="470" var="vv:v3" as="xs:anyURI" slot="13" eval="13">
                     <cast as="xs:anyURI" emptiable="0">
                      <varRef name="property-namespace" slot="2"/>
                     </cast>
                     <let var="vv:v2" as="xs:string" slot="14" eval="13">
                      <cast as="xs:string" emptiable="0">
                       <varRef name="property-name" slot="0"/>
                      </cast>
                      <elem line="434" name="tr" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
                       <sequence>
                        <att name="class" flags="l">
                         <fn name="concat">
                          <convert from="xs:untypedAtomic" to="xs:string">
                           <varRef name="property-namespace" slot="2"/>
                          </convert>
                          <convert from="xs:untypedAtomic" to="xs:string">
                           <varRef name="property-name" slot="0"/>
                          </convert>
                         </fn>
                        </att>
                        <elem line="436" name="td" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                         <callT name="resourceDetailLink" bSlot="2">
                          <withParam name="Q{}property" flags="c" as="xs:string">
                           <str val=""/>
                          </withParam>
                          <withParam name="Q{}namespace" flags="c" as="xs:anyURI">
                           <fn line="438" name="namespace-uri">
                            <dot type="element()"/>
                           </fn>
                          </withParam>
                          <withParam name="Q{}localname" flags="c" as="xs:string">
                           <fn line="439" name="local-name">
                            <dot type="element()"/>
                           </fn>
                          </withParam>
                         </callT>
                        </elem>
                        <elem line="442" name="td" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                         <sequence>
                          <att name="property" flags="l">
                           <convert from="xs:untypedAtomic" to="xs:string">
                            <data>
                             <varRef name="propertyCurie" slot="4"/>
                            </data>
                           </convert>
                          </att>
                          <att name="content" flags="l">
                           <convert from="xs:untypedAtomic" to="xs:string">
                            <data>
                             <dot type="element()"/>
                            </data>
                           </convert>
                          </att>
                          <choose line="443">
                           <fn name="exists">
                            <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
                           </fn>
                           <att line="445" name="xml:lang" nsuri="http://www.w3.org/XML/1998/namespace" flags="l">
                            <convert from="xs:untypedAtomic" to="xs:string">
                             <cast as="xs:untypedAtomic" emptiable="0">
                              <fn name="string">
                               <convert from="xs:untypedAtomic" to="xs:string">
                                <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
                               </convert>
                              </fn>
                             </cast>
                            </convert>
                           </att>
                          </choose>
                          <choose line="448">
                           <fn name="exists">
                            <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                           </fn>
                           <sequence line="450">
                            <att name="datatype" flags="l">
                             <fn name="string-join">
                              <convert from="xs:anyAtomicType" to="xs:string">
                               <data>
                                <mergeAdj>
                                 <callT name="curie" bSlot="3">
                                  <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
                                   <axis line="451" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                                  </withParam>
                                 </callT>
                                </mergeAdj>
                               </data>
                              </convert>
                              <str val=""/>
                             </fn>
                            </att>
                            <let line="454" var="datatype-xmlns" as="document-node()" slot="15" eval="7">
                             <doc line="455" validation="preserve">
                              <callT name="xmlns" bSlot="4">
                               <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
                                <axis line="456" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                               </withParam>
                              </callT>
                             </doc>
                             <copyOf line="459" flags="vc">
                              <slash>
                               <slash simple="1">
                                <varRef name="datatype-xmlns" slot="15"/>
                                <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                               </slash>
                               <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
                              </slash>
                             </copyOf>
                            </let>
                           </sequence>
                          </choose>
                          <elem line="462" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                           <sequence>
                            <att name="class" flags="l">
                             <str val="property-object"/>
                            </att>
                            <callT line="463" name="textDetailLink" bSlot="5">
                             <withParam name="Q{}property" flags="c" as="xs:string">
                              <fn line="464" name="local-name">
                               <dot type="element()"/>
                              </fn>
                             </withParam>
                             <withParam name="Q{}value" flags="c" as="item()">
                              <dot line="465" type="element()"/>
                             </withParam>
                            </callT>
                           </sequence>
                          </elem>
                          <callT line="468" name="connector" bSlot="6">
                           <withParam name="Q{}criteria" flags="c" as="element()*">
                            <filter line="470" flags="b">
                             <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                             <and op="and">
                              <vc op="eq" onEmpty="0" comp="CCC">
                               <fn name="local-name">
                                <dot type="element()"/>
                               </fn>
                               <varRef name="vv:v2" slot="14"/>
                              </vc>
                              <vc op="eq" onEmpty="0" comp="CCC">
                               <fn name="namespace-uri">
                                <dot type="element()"/>
                               </fn>
                               <varRef name="vv:v3" slot="13"/>
                              </vc>
                             </and>
                            </filter>
                           </withParam>
                          </callT>
                          <forEach line="473">
                           <filter flags="b">
                            <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                            <and op="and">
                             <vc op="eq" onEmpty="0" comp="CCC">
                              <fn name="local-name">
                               <dot type="element()"/>
                              </fn>
                              <varRef name="vv:v4" slot="12"/>
                             </vc>
                             <vc op="eq" onEmpty="0" comp="CCC">
                              <fn name="namespace-uri">
                               <dot type="element()"/>
                              </fn>
                              <varRef name="vv:v5" slot="11"/>
                             </vc>
                            </and>
                           </filter>
                           <sequence line="475">
                            <elem name="span" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                             <sequence>
                              <att name="property" flags="l">
                               <varRef name="vv:v6" slot="10"/>
                              </att>
                              <att name="content" flags="l">
                               <convert from="xs:untypedAtomic" to="xs:string">
                                <data>
                                 <dot type="element()"/>
                                </data>
                               </convert>
                              </att>
                              <choose line="476">
                               <fn name="exists">
                                <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
                               </fn>
                               <att line="478" name="xml:lang" nsuri="http://www.w3.org/XML/1998/namespace" flags="l">
                                <convert from="xs:untypedAtomic" to="xs:string">
                                 <cast as="xs:untypedAtomic" emptiable="0">
                                  <fn name="string">
                                   <convert from="xs:untypedAtomic" to="xs:string">
                                    <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
                                   </convert>
                                  </fn>
                                 </cast>
                                </convert>
                               </att>
                              </choose>
                              <choose line="481">
                               <fn name="exists">
                                <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                               </fn>
                               <sequence line="483">
                                <att name="datatype" flags="l">
                                 <fn name="string-join">
                                  <convert from="xs:anyAtomicType" to="xs:string">
                                   <data>
                                    <mergeAdj>
                                     <callT name="curie" bSlot="7">
                                      <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
                                       <axis line="484" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                                      </withParam>
                                     </callT>
                                    </mergeAdj>
                                   </data>
                                  </convert>
                                  <str val=""/>
                                 </fn>
                                </att>
                                <let line="487" var="datatype-xmlns" as="document-node()" slot="16" eval="7">
                                 <doc line="488" validation="preserve">
                                  <callT name="xmlns" bSlot="8">
                                   <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
                                    <axis line="489" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                                   </withParam>
                                  </callT>
                                 </doc>
                                 <copyOf line="492" flags="vc">
                                  <slash>
                                   <slash simple="1">
                                    <varRef name="datatype-xmlns" slot="16"/>
                                    <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                                   </slash>
                                   <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
                                  </slash>
                                 </copyOf>
                                </let>
                               </sequence>
                              </choose>
                             </sequence>
                            </elem>
                            <elem line="496" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                             <sequence>
                              <att name="class" flags="l">
                               <str val="property-object"/>
                              </att>
                              <callT line="497" name="textDetailLink" bSlot="9">
                               <withParam name="Q{}property" flags="c" as="xs:string">
                                <fn line="498" name="local-name">
                                 <dot type="element()"/>
                                </fn>
                               </withParam>
                               <withParam name="Q{}value" flags="c" as="item()">
                                <dot line="499" type="element()"/>
                               </withParam>
                              </callT>
                             </sequence>
                            </elem>
                            <callT line="502" name="connector" bSlot="10">
                             <withParam name="Q{}criteria" flags="c" as="element()*">
                              <filter line="504" flags="b">
                               <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                               <and op="and">
                                <vc op="eq" onEmpty="0" comp="CCC">
                                 <fn name="local-name">
                                  <dot type="element()"/>
                                 </fn>
                                 <varRef name="vv:v7" slot="9"/>
                                </vc>
                                <vc op="eq" onEmpty="0" comp="CCC">
                                 <fn name="namespace-uri">
                                  <dot type="element()"/>
                                 </fn>
                                 <varRef name="vv:v8" slot="8"/>
                                </vc>
                               </and>
                              </filter>
                             </withParam>
                            </callT>
                           </sequence>
                          </forEach>
                         </sequence>
                        </elem>
                       </sequence>
                      </elem>
                     </let>
                    </let>
                   </let>
                  </let>
                 </let>
                </let>
               </let>
              </choose>
             </let>
            </let>
            <true/>
            <elem ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="514" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
             <sequence>
              <att name="property" flags="l">
               <convert from="xs:untypedAtomic" to="xs:string">
                <data>
                 <varRef name="propertyCurie" slot="4"/>
                </data>
               </convert>
              </att>
              <att name="content" flags="l">
               <convert from="xs:untypedAtomic" to="xs:string">
                <data>
                 <dot type="element()"/>
                </data>
               </convert>
              </att>
              <choose line="515">
               <fn name="exists">
                <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/XML/1998/namespace}lang)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/XML/1998/namespace'&amp;&amp;q.local==='lang';"/>
               </fn>
               <att line="517" name="xml:lang" nsuri="http://www.w3.org/XML/1998/namespace" flags="l">
                <convert from="xs:untypedAtomic" to="xs:string">
                 <cast as="xs:untypedAtomic" emptiable="0">
                  <fn name="string">
                   <convert from="xs:untypedAtomic" to="xs:string">
                    <attVal name="Q{http://www.w3.org/XML/1998/namespace}lang" chk="0"/>
                   </convert>
                  </fn>
                 </cast>
                </convert>
               </att>
              </choose>
              <choose line="520">
               <fn name="exists">
                <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
               </fn>
               <sequence line="522">
                <att name="datatype" flags="l">
                 <fn name="string-join">
                  <convert from="xs:anyAtomicType" to="xs:string">
                   <data>
                    <mergeAdj>
                     <callT name="curie" bSlot="11">
                      <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
                       <axis line="523" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                      </withParam>
                     </callT>
                    </mergeAdj>
                   </data>
                  </convert>
                  <str val=""/>
                 </fn>
                </att>
                <let line="526" var="datatype-xmlns" as="document-node()" slot="17" eval="7">
                 <doc line="527" validation="preserve">
                  <callT name="xmlns" bSlot="12">
                   <withParam name="Q{}uri" flags="c" as="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)?">
                    <axis line="528" name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}datatype)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='datatype';"/>
                   </withParam>
                  </callT>
                 </doc>
                 <copyOf line="531" flags="vc">
                  <slash>
                   <slash simple="1">
                    <varRef name="datatype-xmlns" slot="17"/>
                    <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                   </slash>
                   <axis name="namespace" nodeTest="namespace-node()" jsTest="return SaxonJS.U.isNamespaceNode(item)"/>
                  </slash>
                 </copyOf>
                </let>
               </sequence>
              </choose>
             </sequence>
            </elem>
           </choose>
          </let>
          <fn line="540" name="exists">
           <filter flags="b">
            <slash simple="1">
             <dot type="element()"/>
             <axis name="preceding-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
            </slash>
            <and op="and">
             <vc op="eq" onEmpty="0" comp="CCC">
              <fn name="local-name">
               <dot type="element()"/>
              </fn>
              <varRef name="vv:v9" slot="1"/>
             </vc>
             <vc op="eq" onEmpty="0" comp="CCC">
              <fn name="namespace-uri">
               <dot type="element()"/>
              </fn>
              <varRef name="vv:v10" slot="3"/>
             </vc>
            </and>
           </filter>
          </fn>
          <empty/>
          <true/>
          <let ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="586" var="vv:v17" as="xs:anyURI" slot="18" eval="13">
           <cast as="xs:anyURI" emptiable="0">
            <varRef name="property-namespace" slot="2"/>
           </cast>
           <let var="vv:v16" as="xs:string" slot="19" eval="13">
            <cast as="xs:string" emptiable="0">
             <varRef name="property-name" slot="0"/>
            </cast>
            <let line="581" var="vv:v15" as="xs:string" slot="20" eval="13">
             <convert from="xs:untypedAtomic" to="xs:string">
              <data>
               <varRef name="propertyCurie" slot="4"/>
              </data>
             </convert>
             <let line="580" var="vv:v14" as="xs:anyURI" slot="21" eval="13">
              <cast as="xs:anyURI" emptiable="0">
               <varRef name="property-namespace" slot="2"/>
              </cast>
              <let var="vv:v13" as="xs:string" slot="22" eval="13">
               <cast as="xs:string" emptiable="0">
                <varRef name="property-name" slot="0"/>
               </cast>
               <let line="577" var="vv:v12" as="xs:anyURI" slot="23" eval="13">
                <cast as="xs:anyURI" emptiable="0">
                 <varRef name="property-namespace" slot="2"/>
                </cast>
                <let var="vv:v11" as="xs:string" slot="24" eval="13">
                 <cast as="xs:string" emptiable="0">
                  <varRef name="property-name" slot="0"/>
                 </cast>
                 <elem line="544" name="tr" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
                  <sequence>
                   <att name="class" flags="l">
                    <fn name="concat">
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <varRef name="property-namespace" slot="2"/>
                     </convert>
                     <convert from="xs:untypedAtomic" to="xs:string">
                      <varRef name="property-name" slot="0"/>
                     </convert>
                    </fn>
                   </att>
                   <elem line="546" name="td" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                    <callT name="resourceDetailLink" bSlot="13">
                     <withParam name="Q{}property" flags="c" as="xs:string">
                      <str val=""/>
                     </withParam>
                     <withParam name="Q{}namespace" flags="c" as="xs:anyURI">
                      <fn line="548" name="namespace-uri">
                       <dot type="element()"/>
                      </fn>
                     </withParam>
                     <withParam name="Q{}localname" flags="c" as="xs:string">
                      <fn line="549" name="local-name">
                       <dot type="element()"/>
                      </fn>
                     </withParam>
                    </callT>
                   </elem>
                   <elem line="555" name="td" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                    <sequence>
                     <choose>
                      <or op="or">
                       <gc op="=" card="1:1" comp="CCC">
                        <attVal name="Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType" chk="0"/>
                        <str val="Literal"/>
                       </gc>
                       <and op="and">
                        <fn name="empty">
                         <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                        </fn>
                        <and op="and">
                         <and op="and">
                          <fn name="empty">
                           <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}resource)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='resource';"/>
                          </fn>
                          <fn name="empty">
                           <axis name="attribute" nodeTest="attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}nodeID)" jsTest="var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='nodeID';"/>
                          </fn>
                         </and>
                         <fn name="not">
                          <gc op="=" card="1:1" comp="CCC">
                           <attVal name="Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}parseType" chk="0"/>
                           <str val="Resource"/>
                          </gc>
                         </fn>
                        </and>
                       </and>
                      </or>
                      <elem line="556" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                       <sequence>
                        <att name="class" flags="l">
                         <str val="property-object"/>
                        </att>
                        <att name="property" flags="l">
                         <convert from="xs:untypedAtomic" to="xs:string">
                          <data>
                           <varRef name="propertyCurie" slot="4"/>
                          </data>
                         </convert>
                        </att>
                        <callT line="557" name="property-objects" bSlot="14"/>
                       </sequence>
                      </elem>
                      <fn line="562" name="exists">
                       <axis name="child" nodeTest="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}first)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='first';"/>
                      </fn>
                      <elem line="563" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                       <sequence>
                        <att name="class" flags="l">
                         <str val="list-object"/>
                        </att>
                        <att name="rel" flags="l">
                         <convert from="xs:untypedAtomic" to="xs:string">
                          <data>
                           <varRef name="propertyCurie" slot="4"/>
                          </data>
                         </convert>
                        </att>
                        <callT line="564" name="property-objects" bSlot="15"/>
                       </sequence>
                      </elem>
                      <true/>
                      <elem line="568" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                       <sequence>
                        <att name="class" flags="l">
                         <str val="property-object"/>
                        </att>
                        <att name="rel" flags="l">
                         <convert from="xs:untypedAtomic" to="xs:string">
                          <data>
                           <varRef name="propertyCurie" slot="4"/>
                          </data>
                         </convert>
                        </att>
                        <callT line="569" name="property-objects" bSlot="16"/>
                       </sequence>
                      </elem>
                     </choose>
                     <callT line="575" name="connector" bSlot="17">
                      <withParam name="Q{}criteria" flags="c" as="element()*">
                       <filter line="577" flags="b">
                        <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                        <and op="and">
                         <vc op="eq" onEmpty="0" comp="CCC">
                          <fn name="local-name">
                           <dot type="element()"/>
                          </fn>
                          <varRef name="vv:v11" slot="24"/>
                         </vc>
                         <vc op="eq" onEmpty="0" comp="CCC">
                          <fn name="namespace-uri">
                           <dot type="element()"/>
                          </fn>
                          <varRef name="vv:v12" slot="23"/>
                         </vc>
                        </and>
                       </filter>
                      </withParam>
                     </callT>
                     <forEach line="580">
                      <filter flags="b">
                       <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                       <and op="and">
                        <vc op="eq" onEmpty="0" comp="CCC">
                         <fn name="local-name">
                          <dot type="element()"/>
                         </fn>
                         <varRef name="vv:v13" slot="22"/>
                        </vc>
                        <vc op="eq" onEmpty="0" comp="CCC">
                         <fn name="namespace-uri">
                          <dot type="element()"/>
                         </fn>
                         <varRef name="vv:v14" slot="21"/>
                        </vc>
                       </and>
                      </filter>
                      <sequence line="581">
                       <elem name="div" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
                        <sequence>
                         <att name="class" flags="l">
                          <str val="property-object"/>
                         </att>
                         <att name="rel" flags="l">
                          <varRef name="vv:v15" slot="20"/>
                         </att>
                         <callT line="582" name="property-objects" bSlot="18"/>
                        </sequence>
                       </elem>
                       <callT line="584" name="connector" bSlot="19">
                        <withParam name="Q{}criteria" flags="c" as="element()*">
                         <filter line="586" flags="b">
                          <axis name="following-sibling" nodeTest="element()" jsTest="return item.nodeType===1;"/>
                          <and op="and">
                           <vc op="eq" onEmpty="0" comp="CCC">
                            <fn name="local-name">
                             <dot type="element()"/>
                            </fn>
                            <varRef name="vv:v16" slot="19"/>
                           </vc>
                           <vc op="eq" onEmpty="0" comp="CCC">
                            <fn name="namespace-uri">
                             <dot type="element()"/>
                            </fn>
                            <varRef name="vv:v17" slot="18"/>
                           </vc>
                          </and>
                         </filter>
                        </withParam>
                       </callT>
                      </sequence>
                     </forEach>
                    </sequence>
                   </elem>
                  </sequence>
                 </elem>
                </let>
               </let>
              </let>
             </let>
            </let>
           </let>
          </let>
         </choose>
        </let>
       </let>
      </let>
     </let>
    </let>
   </forEach>
  </template>
 </co>
 <co id="27" binds="">
  <template name="Q{}rdfDescriptionEdition" flags="os" line="126" module="rdf2html.xsl" slots="0">
   <sequence role="body" ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="128">
    <elem name="a" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
     <sequence>
      <att name="class" flags="l">
       <str val="action"/>
      </att>
      <att name="href" flags="l">
       <fn name="concat">
        <str val="javascript:rhz.editResourceDescription('"/>
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
           </slash>
          </data>
         </convert>
         <str val=" "/>
        </fn>
        <str val="')"/>
       </fn>
      </att>
      <att name="title" flags="l">
       <str val="Edit description"/>
      </att>
      <valueOf flags="Sl">
       <str val="edit"/>
      </valueOf>
     </sequence>
    </elem>
    <valueOf line="126">
     <str val=" - &#xA;&#x9;&#x9;"/>
    </valueOf>
    <elem line="130" name="a" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
     <sequence>
      <att name="class" flags="l">
       <str val="action"/>
      </att>
      <att name="href" flags="l">
       <fn name="concat">
        <str val="javascript:rhz.newResourceDescription('"/>
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
           </slash>
          </data>
         </convert>
         <str val=" "/>
        </fn>
        <str val="')"/>
       </fn>
      </att>
      <att name="title" flags="l">
       <str val="New description"/>
      </att>
      <valueOf flags="Sl">
       <str val="new"/>
      </valueOf>
     </sequence>
    </elem>
    <valueOf line="126">
     <str val=" -&#xA;&#x9;&#x9;"/>
    </valueOf>
    <elem line="132" name="a" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
     <sequence>
      <att name="class" flags="l">
       <str val="action"/>
      </att>
      <att name="href" flags="l">
       <fn name="concat">
        <str val="javascript:rhz.deleteResourceDescription('"/>
        <fn name="string-join">
         <convert from="xs:untypedAtomic" to="xs:string">
          <data>
           <slash simple="1">
            <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
             <dot flags="a"/>
            </treat>
            <axis name="attribute" nodeTest="(attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID) | attribute(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about))" jsTest="function a() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='ID';};function b() {var q=SaxonJS.U.nameOfNode(item); return q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='about';};return a()||b();"/>
           </slash>
          </data>
         </convert>
         <str val=" "/>
        </fn>
        <str val="')"/>
       </fn>
      </att>
      <att name="title" flags="l">
       <str val="Delete description"/>
      </att>
      <valueOf flags="Sl">
       <str val="del"/>
      </valueOf>
     </sequence>
    </elem>
   </sequence>
  </template>
 </co>
 <co id="28" binds="28 26">
  <mode onNo="TC" flags="dW" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="28" module="rdf2html.xsl">
    <p.nodeTest role="match" test="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);"/>
    <sequence role="action" ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="29">
     <resultDoc global="#&#xA;#Mon May 04 14:48:11 CEST 2020&#xA;indent=yes&#xA;encoding=UTF-8&#xA;media-type=text/xhtml&#xA;omit-xml-declaration=no&#xA;method=html&#xA;" local="#&#xA;#Mon May 04 14:48:11 CEST 2020&#xA;">
      <str role="href" val="#rdf2html"/>
      <applyT role="content" line="30" bSlot="0">
       <axis role="select" name="child" nodeTest="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}RDF)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='RDF';"/>
      </applyT>
     </resultDoc>
     <valueOf line="33">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <fn name="key">
          <str val="Q{http://saxon.sf.net/}kk101"/>
          <str val="sourcetext"/>
          <dot type="document-node()"/>
         </fn>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </valueOf>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="1" rank="1" minImp="0" slots="0" flags="s" line="36" module="rdf2html.xsl">
    <p.nodeTest role="match" test="element(Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}RDF)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri==='http://www.w3.org/1999/02/22-rdf-syntax-ns#'&amp;&amp;q.local==='RDF';"/>
    <elem role="action" ns="=http://www.w3.org/1999/xhtml xsl=~ rdfs=http://www.w3.org/2000/01/rdf-schema# rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#" line="37" name="div" nsuri="http://www.w3.org/1999/xhtml" flags="d" namespaces="# rdf rdfs">
     <sequence>
      <att name="class" flags="l">
       <str val="rdf2html"/>
      </att>
      <choose line="56">
       <fn name="empty">
        <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       </fn>
       <elem line="57" name="p" nsuri="http://www.w3.org/1999/xhtml" flags="dl" namespaces="# rdf rdfs">
        <valueOf flags="l">
         <str val="No data retrieved."/>
        </valueOf>
       </elem>
      </choose>
      <forEach line="60">
       <sort>
        <axis role="select" name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
        <sortKey line="61" comp="CCC">
         <attVal role="select" name="Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about" chk="0"/>
         <str role="order" val="ascending"/>
         <str role="lang" val=""/>
         <str role="caseOrder" val="#default"/>
         <str role="stable" val="yes"/>
         <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
        </sortKey>
       </sort>
       <callT line="62" name="rdfDescription" bSlot="1"/>
      </forEach>
     </sequence>
    </elem>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <key name="Q{http://saxon.sf.net/}kk101" line="0" binds="" flags="u">
  <p.nodeSet type="element()">
   <axis ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="33" name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
  </p.nodeSet>
  <fn ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="33" name="local-name">
   <dot type="element()"/>
  </fn>
 </key>
 <key name="Q{http://saxon.sf.net/}kk102" line="0" binds="" flags="u">
  <p.nodeSet type="element()">
   <axis ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="752" name="descendant" nodeTest="element()" jsTest="return item.nodeType===1;"/>
  </p.nodeSet>
  <attVal ns="xsl=~ rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs=http://www.w3.org/2000/01/rdf-schema#" line="-1" name="Q{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about" chk="0"/>
 </key>
 <output>
  <property name="indent" value="yes"/>
  <property name="encoding" value="UTF-8"/>
  <property name="media-type" value="text/xhtml"/>
  <property name="omit-xml-declaration" value="no"/>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="20"/>
  <property name="method" value="html"/>
 </output>
 <strip>
  <s test="element()" prec="0"/>
 </strip>
 <stripJS test="return true;"/>
 <decimalFormat/>
</package>
<?Σ f04cc386?>
